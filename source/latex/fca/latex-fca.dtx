% \iffalse meta-comment
% vim: textwidth=75
%<*internal>
\iffalse
%</internal>
%<*readme>
        |
-------:| -----------------------------------------------------------------
    fca:| Typesetting Formal Concep Analysis with LaTeX
 Author:| Bernhard Ganter
        | Tobias Schlemmer <keinstein@users.sf.net>   
 E-mail:| keinstein@users.sf.net
License:| Released under the LaTeX Project Public License v1
    See:| http://www.latex-project.org/lppl.txt


Short description:

  Formal Concept Analysis (FCA) is a mathematical field based on the
  theory of lattices and ordered sets, with applications in data
  analysis and knowledge processing. To simplify typesetting of
  FCA-related text, \fcastyle provides two environments and some
  simple macros, just for convenience. \fcastyle offers nothing that
  you could not do without. The two environments are

  - cxt     : for typesetting small formal contexts as cross-tables, and
  - diagram : for making line diagrams of concept lattices.
              This environment may be of some interest for other
              surposes as well, since it can also be used for
              arbitrary ordered sets and graphs.
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip

\iffalse
          
 This program is provided under the terms of the                             %
 LaTeX Project Public License distributed from CTAN                          %
 archives in directory macros/latex/base/lppl.txt.                           %
\ else
 
This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

\fi

\preamble
 latex-fca.dtx
 Copyright ℂ 2022 Ernst-Schröder-Zentrum
                  für Begriffliche Wissensverarbeitung
 Authors: Bernhard Ganter
          Tobias Schlemmer

 This program is provided under the terms of the
 LaTeX Project Public License distributed from CTAN
 archives in directory macros/latex/base/lppl.txt.

 This work is "maintained" (as per LPPL maintenance status) by
 Tobias Schlemmer <keinstein@users.sf.net>.

 This work consists of the files
   latex-fca.dtx and
   latex-fca.ins

 and the derived files
   cxtinput.sty,
   fca.sty,
   formula1.cxt.

\endpreamble

\askforoverwritefalse

\usedir{tex/latex/fca}
\generate{%
        \file{cxtinput.sty}{%
                \usepreamble\defaultpreamble
                \usepostamble\defaultpostamble
                \from{latex-fca.dtx}{cxtinput.sty,package}}
        \file{fca.sty}{%
                \usepreamble\defaultpreamble
                \usepostamble\defaultpostamble
                \from{latex-fca.dtx}{fca.sty,package}}
            }
\usedir{doc/latex/fca}
\generate{%
  \file{formula1.cxt}{
    \nopreamble\nopostamble
    \from{latex-fca.dtx}{formula1.cxt}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/fca}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/fca}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
% \fi
% \iffalse
%<*package>
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%</package>
% \fi
% \iffalse
% Doc-Source file to use with LaTeX2e
% Copyright (C) 2022 Tobias Schlemmer, all rights reserved.
% \fi
% \iffalse
%<*driver>
\ProvidesFile{latex-fca.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<fca.sty>\ProvidesPackage{fca}
%<cxtinput.sty>\ProvidesPackage{cxtinput}
%<*package>
    [2022/02/26 v2.2
%</package>
%<*fca.sty|driver>
Formal Concept Analysis macros]
%</fca.sty|driver>
%<cxtinput.sty> Reading formal contexts in Burmeister format]
%<*driver>
% Hack around the convention to use the vertical bar for macro names.
% This clashes with the tabular environment.
\edef\catcodebarlatex{\noexpand\catcode`|=\the\catcode`|\relax}%
\documentclass[a4paper]{ltxdoc}
\def\catcodebarltxdoc{\noexpand\catcode`|=\active\relax}%
%\usepackage{a4}
\usepackage{dtxdescribe}
\usepackage{fca}
\usepackage{cxtinput}

% we hack the cxt environment so that it deactivates the vertical
% bar. Otherwise it would break vertical column rules in context.
% Since LaTeX2e from 2020-08-21 we can use hooks for that
%
%
\iftrue
\NeedsTeXFormat{LaTeX2e}[1999/12/01]
\expandafter\def\expandafter\cxt
\expandafter{\expandafter\catcodebarlatex\cxt}%
\expandafter\def\expandafter\endcxt
\expandafter{\endcxt\catcodebarltxdoc}%
\else
\NeedsTeXFormat{LaTeX2e}[2020/08/21]
\AddToHook{env/cxt/before}{%
  \catcodebarlatex
}
\AddToHook{env/cxt/after}{%
  \catcodebarltxdoc
}
\fi

% We want to keep the version information of the whole package at one
% and the same place in the file. So we extract the version
% information from the version string.
\makeatletter
\newcommand\fca@parseversion{}
\def\fca@parseversion#1 #2 #3\fca@parseversion{%
  \def\fcacurrentversiondate{#1}%
  \def\fcacurrentversionversion{#2}%
  \def\fcacurrentversiondescription{#3}%
}
\newcommand\fcaparseversion[1]{%
  \edef\@tempa{\noexpand\fca@parseversion\csname ver@#1\endcsname{} 
    \noexpand\fca@parseversion}%
  \@tempa
}
\makeatother

% \selectlanguage{english}
%
\usepackage{iftex}
\ifluatex
\else
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\fi
\usepackage[english]{babel}
\usepackage{lmodern}
\usepackage{xcolor}
% \usepackage[%
%   colorlinks=false,
%   allbordercolors={0.9 0.9 0.9},
%   breaklinks=true,
%   ]{hyperref}

\RequirePackage{stmaryrd}
\usepackage[numbered]{hypdoc}
\hypersetup{
   pdfauthor = {Bernhard Ganter, Tobias Schlemmer},
   pdfkeywords = {FCA LaTeX sytle diagrame context},
   pdftitle = {fca.sty – LaTeX macros for Formal Concept Analysis},
   pdfsubject = {LaTeX style file for typesetting formal contexts and
     concept latticees}
}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\def\fcastyle{\texttt{fca.sty}\xspace}
\fcaparseversion{latex-fca.dtx}
\title{\fcastyle\\\LaTeX--macros for Formal Concept Analysis\\
  \fcacurrentversionversion}
\author{Bernhard Ganter\thanks{TU Dresden\\Ernst-Schröder-Zentrum
    f\"ur Begriffliche Wissensverarbeitung}\\
  Tobias Schlemmer\thanks{TU Dresden}}
\date{\fcacurrentversiondate}
\begin{document}
\DocInput{latex-fca.dtx}
\end{document}
%</driver>
% \fi
% \maketitle
% \begin{abstract}
%   \FCA (FCA) is a mathematical field based on the theory of lattices
%   and ordered sets, with applications in data analysis and knowledge
%   processing.  To simplify typesetting of FCA-related text,
%   \fcastyle provides two environments and some simple macros, just
%   for convenience. \fcastyle offers nothing that you could not do
%   without. The two environments are
% \begin{description}
% \item[cxt] for typesetting small formal contexts as cross-tables, and
% \item [diagram] for making line diagrams of concept lattices. This environment
%  may be of some interest for other purposes as well, since it can also be
%  used for ordered sets and graphs.
% \end{description}
% A recent version of \texttt{fca.sty} should be available from
% \begin{center}
%  \url{https://github.com/keinstein/latex-fca}
% \end{center}
% \end{abstract}
% 
% 
% \tableofcontents
%
% \section{Loading the package}
%
% The package |fca| is loaded by adding
%
% \begin{verbatim}
% \usepackage{fca}
% \end{verbatim}
%
% If you want to include context files in the Burmeister format,
% you should also load the packages |cxtinput|:
% 
% \begin{verbatim}
% \usepackage{fca}
% \usepackage{cxtinput}
% \end{verbatim}
%
% \subsection{Package options of fca.sty}
%
% Currently the package supports two options:
%
% \DescribeOption{compat}
%
% In order to reduce incompatibilities with other packages, 
% since version 2.2 |fca.sty| nearly all macros of |fca.sty| and
% |cxtinput.sty| belong to a so called namespace. That means most of
% them start with the |\fca...|. Only in the environments |cxt| and
% |diagram| this rule is relaxed.
%
% The option |compat| also defines the old names that have been used
% before version 2.2.
%
% \watchout The current implementation can be only used to typeset
% unmodified Documents that were written before version 2.2. It maps
% the new macros to use the old ones. As soon as the new macros are
% redefined, the old ones are ignored. So, make shure you replace all
% occurrances of the old macros by the corresponding new ones at once.
%
% \DescribeOption{nocompat}
%
% This option reverts the effect of |compat|.
%
% \section{Typesetting formal contexts}
%
%
% Formal contexts can be typeset using the |cxt| environment. What
% this (very simple) environment does can be guessed from an example.
% \begin{dtxexample}{A formal context.}
%   \begin{cxt}
%     \cxtName{Formula 1}
%   %
%     \att{1.}
%     \att{2.}
%     \atr{disqualified}
%   %
%     \obj{x..}{Hamilton}
%     \obj{.x.}{Alonso}
%     \obj{.xx}{Massa}
%   \end{cxt}
% \end{dtxexample}
% 
% \DescribeEnv{cxt}\oarg{alignment}
%
% |cxt| generates a tabular of the appropriate format. It takes
% an optional alignment parameter, that is passed to the tabular
% environment (see there for further documentation). The tabular is
% defined as soon as the first |\obj| command is given. Spaces in the 
% preceding lines are not ignored in general. The standard macros have
% been designed to ignore following spaces. But this cannot be extended
% to other macros. Therefore, each line that contains individual
% (non-cxt-code) should be ended with a |%|\ .
% 
% A short demonstration of the alignment parameter:
% 
% \begin{dtxexample}{Alignment parameter of the formal context}
%   \makebox{%
%   \begin{cxt}[t]
%     \cxtName{Formula t}
%     %
%     \att{1.}
%     \att{2.}
%     \atr{disqualified}
%     %
%     \obj{x..}{Hamilton}
%     \obj{.x.}{Alonso}
%     \obj{.xx}{Massa}
%   \end{cxt}%
%   \begin{cxt}[c]
%     \cxtName{Formula c}
%     %
%     \att{1.}
%     \att{2.}
%     \atr{disqualified}
%     %
%     \obj{x..}{Hamilton}
%     \obj{.x.}{Alonso}
%     \obj{.xx}{Massa}
%   \end{cxt}%
%   \begin{cxt}[b]
%     \cxtName{Formula b}
%     %
%     \att{1.}
%     \att{2.}
%     \atr{disqualified}
%     %
%     \obj{x..}{Hamilton}
%     \obj{.x.}{Alonso}
%     \obj{.xx}{Massa}
%   \end{cxt}
%   }
% \end{dtxexample}
% The commands within a \env{cxt} environment are
% 
% \begin{description}
% \item[]|\cxtName{}|\quad Define the text for the upper left cell of the
%  table. Optional. The default is no text.
% \item[]|\att{}|\quad Give an attribute name. These names are processed
%  in the order in which they are given. Attribute names given after an
%  |\obj|  command are ignored.
% \item[]|\atr{}|\quad Same as |\att{}|, but with rotated text.
% \item[]|\obj{}{}|\quad Give an object's name and its incidence vector,
%  consisting of dots and `x'es. The incidences come first, for better
%  alignment. The length of each incidence vector must be the number of
%  attributes. 
% 
% Each  instance of |\obj| is directly translated to a row of the
% |tabular|-environment. It is therefore possible to mix  |\obj|
% commands with usual  |tabular|-commands.
% \end{description}
% \texttt{cxt} can handle an arbitrary number of attributes.
% \bigbreak
% 
% The arrow relations may also be used. Instead of \texttt{x} and \texttt{.},
% type \texttt{d} (for ``down''), \texttt{u} (``up''), or \texttt{b} (``both''), 
% as in the following example:\bigbreak 
% 
% \noindent\begin{minipage}{.45\textwidth}
% \begin{verbatim}
% \begin{cxt}%
% \renewcommand{\fcaCxtArrowStyle}{\footnotesize\color{red}}
% \cxtName{Formula 1}%
% \att{1.}%
% \att{2.}%
% \atr{disqualified}%
% \obj{xbd}{Hamilton}
% \obj{uxb}{Alonso}
% \obj{bxx}{Massa}
% \end{cxt}
% \end{verbatim}
% \end{minipage}
% \hfill
% \begin{minipage}{.40\textwidth}
% \strut\par\strut\par
% \begin{cxt}%
% \renewcommand{\fcaCxtArrowStyle}{\footnotesize\color{red}}
% \cxtName{Formula 1}%
% \att{1.}%
% \att{2.}%
% \atr{disqualified}%
% \obj{xbd}{Hamilton}
% \obj{uxb}{Alonso}
% \obj{bxx}{Massa}
% \end{cxt}
% \end{minipage}
% \bigbreak
% 
% The default for |\fcaCxtArrowStyle| is |\footnotesize|. In the above
% example we have changed it using |\renewcommand| in order to make the
% arrows red. The default colour is black. 
% 
% You can define your own markers using |\cxtMakeChar|. It
% works like |\newcommand| but defines a single Character. For
% single signs use |\cxtrlap| in order to give it an apropriate
% size as in the following example:
% \bigbreak 
% 
% \noindent\begin{minipage}{.45\textwidth}
% \begin{verbatim}
% \begin{cxt}%
% \cxtMakeChar{v}{\cxtrlap{$\vee$}}%
% \cxtMakeChar{\wedge}{\cxtrlap{$\wedge$}}%
% \renewcommand{\fcaCxtArrowStyle}{\footnotesize\color{red}}%
% \cxtName{Formula 1}%
% \att{1.}%
% \att{2.}%
% \atr{disqualified}%
% \obj{xbv}{Hamilton}
% \obj{\wedge xb}{Alonso}
% \obj{bxx}{Massa}
% \end{cxt}
% \end{verbatim}
% \end{minipage}
% \hfill
% \begin{minipage}{.40\textwidth}
% \strut\par\strut\par\strut\par\strut\par
% \begin{cxt}%
% \cxtMakeChar{v}{\rlap{$\vee$}\phantom{$\times$}}%
% \cxtMakeChar{\wedge}{\rlap{$\wedge$}\phantom{$\times$}}%
% \renewcommand{\fcaCxtArrowStyle}{\footnotesize\color{red}}%
% \cxtName{Formula 1}%
% \att{1.}%
% \att{2.}%
% \atr{disqualified}%
% \obj{xbv}{Hamilton}
% \obj{\wedge xb}{Alonso}
% \obj{bxx}{Massa}
% \end{cxt}
% \end{minipage}
% \bigbreak
% 
% 
% For many-valued contexts you have two options. On the one hand you can
% define a marker with one argument that typesets its argument. On the
% other hand there is a macro |\freeobj| that takes a tabular row
% as argument instead of the usual markers. Single character nubers are
% predefined to work as themselves. The following examples
% illustrates such a setting:
% 
% \bigbreak 
% 
% \noindent\begin{minipage}{.45\textwidth}
% \begin{verbatim}
% \begin{cxt}%
% \cxtMakeChar{w}[1]{#1}%
% \cxtName{Formula 1}%
% \att{1.}%
% \att{2.}%
% \atr{disqualified}%
% \obj{5bw1}{Hamilton}
% \obj{w2xw{77}}{Alonso}
% \freeobj{1&2&3}{Massa}
% \end{cxt}
% \end{verbatim}
% \end{minipage}
% \hfill
% \begin{minipage}{.40\textwidth}
% \strut\par\strut\par
% \begin{cxt}%
% \cxtMakeChar{w}[1]{\cxtrlap{#1}}%
% \cxtName{Formula 1}%
% \att{1.}%
% \att{2.}%
% \atr{disqualified}%
% \obj{5bw1}{Hamilton}
% \obj{w2xw{77}}{Alonso}
% \freeobj{\cxtrlap{1}&2&3}{Massa}
% \end{cxt}
% \end{minipage}
% \bigbreak
% 
%
% \section{Including Burmeister context files}
% 
% The package |cxtinput| allows to use context files in Burmeister
% format to be included directly in a \LaTeX{} document. It's usage is
% as simple as possible. In order to allow for certain customizations it
% needs to be issued inside a |cxt| environment.
% \medbreak
% 
% \noindent\begin{minipage}{.45\textwidth}
% \begin{verbatim}
% \documentclass{article}
% \usepackage{fca,cxtinput}
% \begin{document}
% \begin{cxt}%
% \cxtName{Formula 1}%
% \cxtinput{formula1.cxt}%
% \end{cxt}
% \end{document}
% \end{verbatim}
% \end{minipage}
% \hfill
% \begin{minipage}{.40\textwidth}
% \begin{cxt}%
%   \cxtName{Formula 1}%
%   \cxtinput{formula1.cxt}%
% \end{cxt}
% \end{minipage}
% \bigbreak
% 
% Unrotated attribute names can be achieved using the following code:
% 
% \noindent\begin{minipage}{.45\textwidth}
% \begin{verbatim}
% \documentclass{article}
% \usepackage{fca,cxtinput}
% \begin{document}
% \begin{cxt}%
% \cxtName{Formula 1}%
% \cxtinput{formula1.cxt}%
% \end{cxt}
% 
% \begin{cxt}%
% \cxtName{Formula 2}%
% \cxtinput{formula1.cxt}%
% \end{cxt}
% \end{document}
% \end{verbatim}
% \end{minipage}
% \hfill
% \begin{minipage}{.40\textwidth}
% \strut\par\strut\par
% \begin{cxt}%
% \cxtName{Formula 1}%
% \renewcommand{\atr}{\att}%
% \cxtinput{formula1.cxt}%
% \end{cxt}
% 
% \bigskip
% \begin{cxt}
% \cxtName{Formula 2}%
% \cxtinput{formula1.cxt}%
% \end{cxt}
% \end{minipage}
% \bigbreak
% 
% \section{Environment \texttt{diagram}}
% The \texttt{diagram} environment helps typesetting diagrams of concept
% lattices, but can be used for ordered sets and graphs as well. Again we start
% with a small example (for which we have set |\unitlength 1.2mm|):
% \bigbreak
% 
% \begin{dtxexample}{A diagram}
%   {\unitlength 1.2mm\relax
% \begin{diagram}{40}{55}
% \Node{1}{20}{10}
% \Node{2}{35}{20}
% \Node{3}{5}{30}
% \Node{4}{35}{40}
% \Node{5}{20}{50}
% \Edge{1}{2}
% \Edge{1}{3}
% \Edge{2}{4}
% \Edge{3}{5}
% \Edge{4}{5}
% \Numbers
% \leftAttbox{3}{2}{2}{1.}
% \rightAttbox{2}{2}{2}{disqualified}
% \rightAttbox{4}{2}{2}{2.}
% \leftObjbox{3}{2}{2}{Hamilton}
% \rightObjbox{2}{2}{2}{Massa}
% \rightObjbox{4}{2}{2}{Alonso}
% \end{diagram}
% }
% \end{dtxexample}
% 
% Here are the commands of the \texttt{diagram}--environment:
% \begin{description}
%   \ItemDescribeEnv{diagram}\marg{width}\marg{height}
% Starts a PGF picture and sets its bounding box.
% 
% The offsets are zero by default. They can be modified using
% |\renewcommand|. Note that the diagram dimensions do not take the lables
% into account, these may overlap. Putting an |\fbox| around the above
% diagram yields (with |\unitlength .7mm|)
% \begin{dtxexample}{Changing the bounding box}
%   \fbox{%
%     \unitlength .7mm
%     \begin{diagram}{70}{100}
%       \Node{1}{20}{10}
%       \Node{2}{35}{20}
%       \Node{3}{5}{30}
%       \Node{4}{35}{40}%
%       \Node{5}{20}{50}
%       \Edge{1}{2}
%       \Edge{1}{3}
%       \Edge{2}{4}
%       \Edge{3}{5}
%       \Edge{4}{5}
% %\Numbers
% \leftAttbox{3}{2}{2}{1.} \rightAttbox{2}{2}{2}{disqualified}
% \rightAttbox{4}{2}{2}{2.} \leftObjbox{3}{2}{2}{Hamilton}
% \rightObjbox{2}{2}{2}{Massa} \rightObjbox{4}{2}{2}{Alonso}
% \end{diagram}}
% \end{dtxexample}
% \ItemDescribeEnv{diagram}
% If the diagram environment is called without parameters, the
% bounding box is calculated automatically by PGF.
% 
% \begin{dtxexample}{Automatic bounding box}
%   \fbox{%
%   \unitlength .7mm
%   \begin{diagram}
%     \Node{1}{20}{10}
%     \Node{2}{35}{20}
%     \Node{3}{5}{30}
%     \Node{4}{35}{40}%
%     \Node{5}{20}{50}
%     \Edge{1}{2}
%     \Edge{1}{3}
%     \Edge{2}{4}
%     \Edge{3}{5}
%     \Edge{4}{5}
%     \leftAttbox{3}{2}{2}{1.}
%     \rightAttbox{2}{2}{2}{disqualified}
%     \rightAttbox{4}{2.}%
%     \leftObjbox{3}{Hamilton}
%     \rightObjbox{2}{2}{2}{Massa}
%     \rightObjbox{4}{2}{2}{Alonso}
%   \end{diagram}}
% \end{dtxexample}
% \ItemDescribeMacro{\Node}{nodenumber}\marg{xpos}\marg{ypos}
% Puts a circle at position \texttt{(xpos,ypos)} of the picture. 
% These circles are drawn when |\end{diagram}| is invoked. The default
% diameter of the circles is 4 (times |\unitlength|). It can be changed
% (for all circles) with |\fcaCircleSize{}|. The argument must be an integer.
% The node numbers must be different, consecutive between 0 and 51, but need not
% necessarily be given in ascending order. 
% 
% \ItemDescribeMacro{\Numbers} Puts numbers inside circles.  While working on a
%  diagram it can be helpful to have a picture with numbered 
% nodes. The result of the following command sequence is shown on the right:
% 
% \begin{dtxexample}{Plotting numbers inside of nodes}
%   \fbox{\unitlength .7mm
%   \begin{diagram}{40}{55}
%     \Node{5}{20}{10}
%     \Node{6}{35}{20}
%     \Node{4}{5}{30}
%     \Node{8}{35}{40}
%     \Node{7}{20}{50}
%     \Numbers
%   \end{diagram}}
% \end{dtxexample}
% 
% We recommend to remove the |\Numbers|--command when the diagram is
% ready. In most cases it is not a good idea to put text inside the nodes of a diagram. 
% 
% \item[]|\Edge{nodenumber1}{nodenumber2}|\quad
% Puts a line between the two nodes with the given numbers. These must have been
% declared earlier with a |\Node|--command. For nodes with coordinates
% |(u,v)| and |(x,y)| the command translates to 
% \begin{center}|\fcadrawline(u,v)(x,y)|.\end{center}
% |\fcadrawline(u,v)(x,y)| is a pdf\LaTeX--compatible reimplementation of
% the |\drawline| command, the latter provided by the \texttt{eepic}
% package. 
% 
% The |\Edge|--command is executed immediately. It can be mixed with other
% \texttt{picture}- and \texttt{eepic}--commands like |\spline|
% (see the \texttt{eepic} manual).  
% 
% \item[]|\leftAttbox{nodenumber}{xoffset}{yoffset}{text1\\ text2\\ ...}|\quad\par
% This is one of six commands 
% \begin{center}
%  \{|\left|, |\center|, |\right|\}$\times$\{|Attbox|,
%  |Objbox|\}.\end{center}  These are used to put
% text to diagram nodes. The |Attbox|--commands place the text above the
% corresponding node, the |Objbox| below. Similarly, the text can be placed
% to the left, be centered, or be placed to the right of the labelled node. All
% this can be modified with the \texttt{xoffset, yoffset}--parameters. 
% 
% The offsets increase the placement effect. A |\rightObjbox|, which is
% placed to the lower right of the corresponding node, will be moved even
% further to the lower right if the offsets are positive. Similarly, positive
% offsets will push a |\leftAttbox| even more to the upper left, etc.
% 
% The text of the label is put in a |\parbox|. It can be broken into
% several lines using |\\|. The width of the |\parbox| is
% |\LabelBoxWidth|, with a default value of 40mm. This can be changed using
% |\renewcommand|.
% 
% The label text and the labelled node are connected with a dotted line.
% Here is an example:
% 
% \begin{minipage}{.6\textwidth}
% \begin{verbatim}
% {\unitlength .7mm
% \begin{diagram}{40}{15}
% \Node{0}{20}{10}
% \leftAttbox{0}{1}{1}{left\\ 
% attribute\\ label}
% \rightAttbox{0}{10}{10}{right
% attri-\\ bute label}
% \rightObjbox{0}{20}{5}{right\\ 
% object\\ label}
% \centerObjbox{0}{0}{5}{centered\\ 
% object label}
% \end{diagram}}
% \end{verbatim}
% \end{minipage}\hfill
% \begin{minipage}{.3\textwidth}
% {\unitlength .7mm
% \begin{diagram}{40}{15}
% \Node{0}{20}{10}
% \leftAttbox{0}{1}{1}{left\\ attribute\\ label}
% \rightAttbox{0}{10}{10}{right attri-\\ bute label}
% \rightObjbox{0}{20}{5}{right\\ object\\ label}
% \centerObjbox{0}{0}{5}{centered\\ object label}
% \end{diagram}}
% \end{minipage}
% 
% The style of the lables is given by
% \begin{description}
% \item[]|\ObjectLabelStyle|\hspace*{3.5ex}\quad 
% Default: |\small\baselineskip6pt\rm|
% \item[]|\AttributeLabelStyle|\quad 
% Default: |\small\baselineskip6pt\it|.
% \end{description}
% These values can be changed with |\renewcommand|.
% 
% \item[]|\end{diagram}|\quad This concludes the diagram. The circles
%  representing the nodes are drawn and filled with white. Everything inside
%  such a circle (except for the numbers caused by the |\Numbers| command)
%  is erased.
% \end{description}
% 
% \subsection{Error messages}
% Package error messages for the \texttt{diagram} environment are not yet
% implemented. Errors usually are caused by using node numbers that have not
% been defined earlier.
% 
% \subsection{Fine tuning}
% You can change certain layout parameters either permanently (by modifying the
% file \texttt{fca.sty}) or temporarily using the following commands:
% \begin{description}
% \ItemDescribeMacro{\fcaCircleSize}\marg{size} Default: 4\qquad
% (times |\unitlength|)
% \ItemDescribeMacro {\NodeColor}\marg{color}   Default: white
% \ItemDescribeMacro {\fcaNodeThickness}\marg{thickness}  \qquad
% Default: 1.2pt
% \ItemDescribeMacro {\fcaEdgeThickness}\marg{thickness}  \qquad
% Default: .8pt
% \ItemDescribeMacro {\NodeThickness}\marg{thickness} an alias to
% \cs{fcaNodeThickness} inside a \env{diagram} environment
% \ItemDescribeMacro {\EdgeThickness}\marg{thickness} an alias to
% \cs{fcaEdgeThickness} inside a \env{diagram} environment
% \ItemDescribeMacro {\NoDots}
% \ItemDescribeMacro {\ObjectLabelStyle} can be redefined to set the
% style of object labels,
% \ItemDescribeMacro {\AttributeLabelStyle} can be redefined to set
% the syele of attribute labels, 
% \ItemDescribeMacro {\LabelBoxWidth} can be redefined to a width,
% which will be used to set the width of the object and attribute boxes.
% \end{description}
% Except for the first three, these commands can be focussed to single instances,
% using braces. For example,
% \begin{center}
% |{\NoDots\centerObjbox{nodenumber}{xoffset}{yoffset}{labeltext}}|
% \end{center}
% generates a single centered object label without dotted line.
% 
% \subsection{pdf\LaTeX \ compatibility}
% Version 2 of the \texttt{diagram} environment was designed to be pdf\LaTeX\
% compatibile. It no longer uses \texttt{eepic.sty}, which is not supported by
% pdf\LaTeX. Instead it uses \texttt{pict2e} and a |\fcadrawline| command,
% that replaces \texttt{eepic}'s |\drawline|. 
% 
% \subsection{Problems with colour}
% Since the diagrams are drawn using the \texttt{picture}--commands and the
% \texttt{pict2e} package, we can combine with other packages, for example, with
% the \texttt{color} package. This allows us to colour edges and text (but not
% individual nodes, see \ref{subsec:colornode}).
% However, \texttt{color} has a problem with spacing. Changing colors can cause
% unwanted spaces, and these are particularly unpleasant in pictures. Have a
% look at the following:\medbreak
% 
% \begin{minipage}{.6\textwidth}
% \begin{verbatim}
% {\unitlength 2mm
% \begin{diagram}{20}{20}
% \Node{1}{5}{5}  
% \Node{2}{15}{15}  
% {\color{red}\Edge{1}{2}}
% {\color{blue}\Edge{1}{2}}
% {\color{red}\Edge{1}{2}}
% {\color{blue}\Edge{1}{2}}
% \end{diagram}}
% \end{verbatim}
% \end{minipage}\hfill
% \begin{minipage}{.3\textwidth}
% {\unitlength 2mm
% \begin{diagram}{20}{20}
% \Node{1}{5}{5}  
% \Node{2}{15}{15}  
% {\color{red}\Edge{1}{2}}
% {\color{blue}\Edge{1}{2}}
% {\color{red}\Edge{1}{2}}
% {\color{blue}\Edge{1}{2}}
% \end{diagram}}
% \end{minipage}
% \medbreak 
% 
% \noindent This effect disappears when spaces are avoided. Here is a better
% version:\medbreak 
% 
% \begin{minipage}{.6\textwidth}
% \begin{verbatim}
% {\unitlength 2mm
% \begin{diagram}{20}{20}
% \Node{1}{5}{5}  
% \Node{2}{15}{15}  
% {\color{red}\Edge{1}{2}}%
% {\color{blue}\Edge{1}{2}}%
% {\color{red}\Edge{1}{2}}%
% \color{blue}\Edge{1}{2}}%
% \end{diagram}
% \end{verbatim}
% \end{minipage}\hfill
% \begin{minipage}{.3\textwidth}
% {\unitlength 2mm
% \begin{diagram}{20}{20}
% \Node{1}{5}{5}  
% \Node{2}{15}{15}  
% {\color{red}\Edge{1}{2}}%
% {\color{blue}\Edge{1}{2}}%
% {\color{red}\Edge{1}{2}}%
% {\color{blue}\Edge{1}{2}}%
% \end{diagram}}
% \end{minipage}
% 
% 
% \subsection{Colouring nodes}
% \label{subsec:colornode}
% Nodes are filled with white by default. This can be changed to any other colour
% using the command |\NodeColor{colorname}|. This color then applies to
% \textbf{all nodes}. \texttt{colorname} must be a
% color specification as  used by the \texttt{color} package.
% \texttt{``red''}, \texttt{``blue''}, and \texttt{``green''} should usually
% work. Other colors may be defined with the |\definecolor| command, see
% the documentation of the \texttt{graphics} bundle. For finer colour
% nuances use the \texttt{xcolor} package and its documentation.
% 
% \fcastyle does not support individual node colouring, but there is a trick to
% do it nevertheless. Simply include the \texttt{diagram} environment into a 
% \texttt{picture} environment and insert the coloured nodes after the diagram
% is drawn. How this is done should become clear from the example
% below. \fcastyle provides a command |\ColorNode{colorname}| for this.
% It overwrites numbers generated by the |\Numbers| command.
% \medbreak
% 
% \begin{minipage}{.6\textwidth}
% \begin{verbatim}
% {\definecolor{grey}{gray}{.8}
% \unitlength 2mm
% \fcaNodeThickness{2.5pt}
% \fcaEdgeThickness{2.5pt}
% \begin{picture}(20,20)%
% \put(0,0){%
% \begin{diagram}{20}{20}
% \NodeColor{grey}
% \Node{1}{5}{5}  
% \Node{2}{15}{15}  
% \Edge{1}{2}%
% \end{diagram}}
% \put(5,5){\ColorNode{green}}
% \end{picture}}
% \end{verbatim}
% \end{minipage}\hfill
% \begin{minipage}{.3\textwidth}
% {\unitlength 2mm\definecolor{grey}{gray}{.8}
% \fcaNodeThickness{2.5pt}
% \fcaEdgeThickness{2.5pt}
% \begin{picture}(20,20)%
% \put(0,0){%
% \begin{diagram}{20}{20}
% \NodeColor{grey}
% \Node{1}{5}{5}  
% \Node{2}{15}{15}  
% \Edge{1}{2}%
% \end{diagram}}
% \put(5,5){\ColorNode{green}}
% \end{picture}}
% \end{minipage}
% 
% \clearpage
% \section{Some macros}
% For a short description see Figure~\ref{fig:macros}.
% \begin{figure}[p]
%   \begin{center}
%    \begin{tabular}{cll}\hline
% Result&command& German version\\\hline
% $\GMI$&|\GMI|&\\
% $\context$&|\context|&\\
% $\context[L]$&|\context[L]|&\\
% $\CL$ &|\CL| &|\BV| \\
% $\BVGMI$  &|\CLGMI| &|\BVGMI| \\
% $\BGMI$  & |\CGMI|& |\BGMI|\\
% $\extent{}$&|\extent{}|&\\
% $\intent{}$&|\intent{}|&\\
% $\extents{}$&|\extents{}|&\\
% $\intents{}$&|\intents{}|&\\
% $\HNI$   &|\HNI| & \\
% $\relI$   &|\relI| & \\
% $\notI$   &|\notI| & \\
% $\bigtimes$   &|\bigtimes| & \\
% $\Semi$   &|\Semi| & \\
% $\Runterpfeil$   &|\DownArrow|&|\Runterpfeil| \\
% $\Hochpfeil$   &|\UpArrow| &|\Hochpfeil| \\
% $\Doppelpfeil$   &|\DoubleArrow| &|\Doppelpfeil| \\
% $\IRunterpfeil$   &|\IDownArrow| &|\IRunterpfeil| \\
% $\IHochpfeil$   &|\IUpArrow| &|\IHochpfeil| \\
% $\DDPfeil$   &|\DDArrow| &|\DDPfeil| \\
% $\NDDPfeil$   &|\NDDArrow| &|\NDDPfeil| \\
% \FCA   &|\FCA| & \\
% \FBA   & &|\FBA| \\
% \FnBA   & &|\FnBA| \\\hline
%      \end{tabular}
% \caption{Table of \texttt{fca.sty}--macros.}\label{fig:macros}
%  \end{center}
% \end{figure}
% \begin{figure}[p]
%  \begin{center}
%      \begin{tabular}{lll}\hline
% Symbol&command&package required\\\hline
% $\vee$&|\vee|&\\
% $\wedge$&|\wedge|&\\
% $\bigvee$&|\bigvee|&\\
% $\bigwedge$&|\bigwedge|&\\
% $\sqcup$&|\sqcup|&\\
% $\sqcap$&|\sqcap|&\\
% $\bigsqcup$&|\bigsqcup|&\\
% $\bigsqcap$&|\bigsqcap|&stmaryrd\\\hline
% &||&\\  
% \end{tabular}
% \caption{Other symbols that are used in \FCA, and the commands that generate
%  them.}\label{fig:2}\end{center} 
% \end{figure}
% 
% 
% \begin{description}
% \item[]|\GMI|\quad The formal context $\GMI$. 
% \item[]|\context|\quad The symbol $\context$, a frequently used name for
%  a formal context.
% \item[]|\context[S]|\quad Other letters, such as $\context[S]$, may also
%  be used. 
% \item[]|\CL|\quad The symbol $\CL$ for the concept lattice operator. If
%  ${\mathbb K}$ is a formal context, then $\CL({\mathbb K})$ denotes its
%  concept lattice.   
% \item[]|\BV|\quad same as |\CL|.  
% \item[]|\CLGMI|\quad The concept lattice $\CLGMI$ of the formal context
%  $(G,M,I)$.   
% \item[]|\BVGMI|\quad Same as |\CLGMI|.  
% \item[]|\CGMI|\quad The set $\CGMI$ of all formal concepts of the formal
%  context   $(G,M,I)$.   
% \item[]|\BGMI|\quad Same as |\CGMI|.  
% \item[]|\extent|\quad The extent $\extent{\mathfrak{c}}$ of the formal
%  concept $\mathfrak{c}:=(A,B)$ is  $A$. 
% \item[]|\intent|\quad The intent $\intent{\mathfrak{c}}$ of the formal
%  concept $\mathfrak{c}:=(A,B)$ is  $B$. 
% \item[]|\extents|\quad The set $\extents{\context}$ of extents of the
%  formal context $\context$.  
% \item[]|\intents|\quad The set $\intents{\context}$ of intents of the
%  formal context $\context$.  
% \item[]|\HNI|\quad The subcontext $\HNI$.  
% \item[]|\relI|\quad The incidence relation $\relI$.  
% \item[]|\notI|\quad The negation $\notI$ of the incidence
%  relation.  
% \item[]|\bigtimes|\quad The product symbol $\bigtimes$.
% \item[]|\DownArrow|\quad The $\Runterpfeil$ of the arrow relations.  
% \item[]|\Runterpfeil|\quad Same as |\DownArrow|. 
% \item[]|\UpArrow|\quad The $\Hochpfeil$ of the arrow relations.
% \item[]|\Hochpfeil|\quad   Same as |\UpArrow|.
% \item[]|\DoubleArrow|\quad  The $\Doppelpfeil$ of the arrow relations.
% \item[]|\Doppelpfeil|\quad   Same as |\DoubleArrow|.
% \iffalse
% \item[]|\IDownArrow|\quad Gives $\IRunterpfeil$, which has the same
%  meaning as $\DownArrow$,  but is drawn in the other direction. This is
%  needed in the   definition of $\DPfeil$.
% \item[]|\IRunterpfeil|\quad  Same as |\IDownArrow|.
% \fi
% \item[]|\IUpArrow|\quad  Gives $\IHochpfeil$, which is has the same
%  meaning as $\UpArrow$,  but is drawn in the other direction. This is needed
%  in the  definition of $\DPfeil$.
% \item[]|\IHochpfeil|\quad  Same as |\IUpArrow|.
% \item[]|\DDArrow|\quad Gives $\DDPfeil$, the symbol for the transitive
%  closure of the arrow relations.  
% \item[]|\DDPfeil|\quad  Same as |\DDArrow|.
% \item[]|\NDDArrow|\quad Gives $\NDDPfeil$ the symbol for the negation of
%  $\DDPfeil$.   
% \item[]|\NDDPfeil|\quad  Same as |\NDDArrow|.
% \item[]|\Semi|\quad Gives $\Semi$, the symbol for the semi-product.  
% \item[]|\FCA|\quad Prints ``\FCA''.  In most cases, this command does not
%  eat the space following it (thanks to |\xspace|).  
% \item[]|\FBA, \FnBA|\quad Print ``Formale(n) Begriffsanalyse''. These
%  commands also use |\xspace| so that blanks are preserved.
% \item[]Some symbols that are provided by \LaTeX\ are listed in
%  Figure~\ref{fig:2}. 
% \end{description}
% 
% \par\noindent
% Here is a sample text:
% \begin{verbatim}
% \FCA offers an elegant way to determine the congruence relations 
% of a complete lattice: The congruence lattice of a doubly founded 
% concept lattice $\CLGMI$ is isomorphic to $\CL(G,M,\NDDArrow)$.
% \end{verbatim}
% This translates to:
% \begin{center}
%  \begin{minipage}{.87\textwidth}
%  \FCA offers an elegant way to determine the congruence relations of a
%  complete lattice: The congruence lattice of a doubly founded concept lattice
%  $\CLGMI$ is   isomorphic to $\CL(G,M,\NDDArrow)$.
%  \end{minipage}
% \end{center}
% 
% 
% \section{To do}
% \begin{itemize}
% \item Improve the placement of the dotted lines connecting nodes with
%  attribute- and object names.
% \item Allow half-shaded nodes in diagrams, and make them
%  (optionally) automatic for object- and attribute concepts.
% \item Improve the code to avoid unwanted blanks.
% \end{itemize}
% 
% 
% 
% 
% 
% 
% 
% 
% 
% \StopEventually{\PrintChanges}
% \section{The Code}
% \iffalse
%    \begin{macrocode}
%<*fca.sty>
%    \end{macrocode}
% \fi
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
% This is file `fca.sty' : LaTeX macros for Formal Concept Analysis           %
%                                                                             %
% Copyright  Bernhard Ganter   5/03                                           %
% Version of                   10/07                                          %
%                                                                             %
% This program is provided under the terms of the                             %
% LaTeX Project Public License distributed from CTAN                          %
% archives in directory macros/latex/base/lppl.txt.                           %
%                                                                             %
% This package contains two environments, called cxt and diagram,             %
% for typesetting formal contexts and order diagrams,                         %
% and a few macros for frequently used symbols in FCA.                        %
%                                                                             %
% Short descriptions are given below. A recent version of this file           %
% as well as a file named fcadoc.tex                                          %
% should be available at http://tu-dresden.de/Members/bernhard.ganter         %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
%
% \subsection{Package options for fca.sty}
%
%    \begin{macrocode}
\newif\iffca@compat@macros
\fca@compat@macrosfalse
\DeclareOption{compat}{%
  \fca@compat@macrostrue
}
\DeclareOption{nocompat}{%
  \fca@compat@macrosfalse
}
%    \end{macrocode}
%    \begin{macrocode}
\ProcessOptions\relax
%    \end{macrocode}
%
% \subsection{Loading other packages and general helpers}
%    \begin{macrocode}
\RequirePackage{pgf}
\RequirePackage{amssymb,epic,graphics,color,ifthen,rotating,xspace,newdrawline}%%
%    \end{macrocode}
%
% \begin{macro}{\fca@parselength}\marg{register}\marg{expression}\marg{default unit}
%   Evaluates \meta{expression}. If it has no unit the \meta{default
%   unit} is use instead. The result is stored in \meta{register}.
%    \begin{macrocode}
\newcommand*\fca@parselength[3]{%
  \pgfmathparse{#2}%
  \ifpgfmathunitsdeclared
    #1=\pgfmathresult pt\relax
  \else
    #1=\pgfmathresult#3%
  \fi
}
%    \end{macrocode}
%   
% \end{macro}
%
% \subsection{The context environment \env{cxt}}
% \subsubsection{Some configurations}
%
% \begin{macro}{\fca@cxt@Kreuz}
% \begin{macro}{\fca@cxt@Punkt}
% \begin{macro}{\fcaCxtArrowStyle}
% \begin{macro}{\cxtArrowStyle}
% \changes{2.2}{2022/03/8}{rename \cs{cxtArrowStyle} to \cs{fcaCxtArrowStyle}}
% \begin{macro}{\fca@cxt@down}
% \begin{macro}{\fca@cxt@up}
% \begin{macro}{\fca@cxt@both}
%   First we define some symbols that are used in formal contexts.
%    \begin{macrocode}
\newcommand{\fca@cxt@Kreuz}{$\times$}%
\newcommand{\fca@cxt@Punkt}{}%
\iffca@compat@macros
  \newcommand{\cxtArrowStyle}{\footnotesize}
  \def\fcaCxtArrowStyle{\cxtArrowStyle}
\else
  \newcommand{\fcaCxtArrowStyle}{\footnotesize}
\fi
\newcommand{\fca@cxt@down}{\fcaCxtArrowStyle$\Runterpfeil$}%
\newcommand{\fca@cxt@up}{\fcaCxtArrowStyle$\Hochpfeil$}%
\newcommand{\fca@cxt@both}{\fcaCxtArrowStyle$\Doppelpfeil$}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \DescribeCounter{fca@cxt@mAnz}%
%   Count the number of attributes in the current context.
%    \begin{macrocode}
\newcounter{fca@cxt@mAnz}%
%    \end{macrocode}
%
% \DescribeBoolean{fca@cxt@ttributes}
% Record whether we ar still in
% the attributes section or whether we have already started the object
% section of a formal context.
%
% \changes{2.2}{2022/03/08}{Rename \bool{@ttributes} to \bool{fca@cxt@ttributes}}
%    \begin{macrocode}
\newboolean{fca@cxt@ttributes}%
%    \end{macrocode}
%
% \DescribeLength{\fca@cxt@nameraise}
% Helper length for vertical alignment of the context and attribute names.
% \DescribeLength{\fca@cxt@ttnameheight}
% Helper length for vertical alignment of the context and attribute names.
%
% \changes{2.2}{2022/03/08}{Rename \cs{@ttnameheight} to \cs{fca@cxt@ttnameheight}}
% 
%    \begin{macrocode}
\newlength{\fca@cxt@nameraise}%
\newlength{\fca@cxt@ttnameheight}%
%    \end{macrocode}
% 
%
% \begin{macro}{\adjcxt@name}
% Adjusts the the vertical alignment of the attributes.
%    \begin{macrocode}
\newcommand{\adjcxt@name}{%
  \ifthenelse{\fca@cxt@nameraise<\fca@cxt@ttnameheight}%
  {\setlength{\fca@cxt@nameraise}{\fca@cxt@ttnameheight}}{}}%
%    \end{macrocode}
%
% \end{macro}
%
% \begin{macro}{\alignBottom}
% \begin{macro}{\fcaCxtAlignBottom}
%   Align the current context to the bottom. Inside the \env{cxt}
%   environment the macro \cs{fcaCxtAlignBottom} is available in its
%   short form \cs{alignBottom}.
%
%   \changes{2.2}{2022/03/08}{add \cs{cxtAlignBottom}}
%    \begin{macrocode}
\newcommand{\fcaCxtAlignBottom}{\def\fca@cxt@align{b}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\alignCenter}
% \begin{macro}{\fcaCxtAlignCenter}
%   Align the current context to the top. Inside the \env{cxt}
%   environment the macro \cs{fcaCxtAlignCenter} is available in its
%   short form \cs{alignCenter}.
%
%   \changes{2.2}{2022/03/08}{add \cs{cxtAlignCenter}}
%    \begin{macrocode}
\newcommand{\fcaCxtAlignCenter}{\def\fca@cxt@align{t}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\alignTop}
% \begin{macro}{\fcaCxtAlignTop}
%   Align the current context to the top. Inside the \env{cxt}
%   environment the macro \cs{fcaCxtAlignTop} is available in its
%   short form \cs{alignTop}.
%
%   \changes{2.2}{2022/03/08}{add \cs{cxtAlignTop}}
%    \begin{macrocode}
\newcommand{\fcaCxtAlignTop}{\def\fca@cxt@align{t}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsubsection{The main structure of a context}
%
% Typically a context is created in the following way:
% \begin{enumerate}
% \item The environment \env{cxt} is opened. This sets up the basic
%   configuration. An empty name is constructed.
% \item Attributes are added to the context. They are added as tokens
%   to \cs{fca@cxt@tabtop}.
% \item When the control arrives at the first call to \cs{obj}, the
%   \env{tabular} environment is opened and \cs{att} and \cs{atr} are
%   disabled.
% \end{enumerate}
%
% \begin{macro}{\cxtName}
% \begin{macro}{\fcaCxtName}
%   Set the name of the current formal context. If used outside of a
%   \env{cxt} environment it sets the name for all following contexts.
%   Inside a \env{cxt} environment \cs{fcaCxtName} can be accessed
%   also with the shorter name \cs{cxtName}.
%   \changes{2.2}{2022/03/08}{rename \cs{cxtName} to \cs{fcaCxtName},
%   \cs{cxtName} is still accessible inside the \env{cxt} environment,
%   ignore spaces after the macro call}
%    \begin{macrocode}
\newcommand{\fcaCxtName}[1]{%
  \def\fca@cxtn@me{%
    \multicolumn{1}{|c||}{%
      \settoheight{\fca@cxt@ttnameheight}{#1}%
      \addtolength{\fca@cxt@nameraise}{-1\fca@cxt@ttnameheight}%
      \raisebox{.5\fca@cxt@nameraise}{#1}%
    }%
  }%
  \ignorespaces
}%
\iffca@compat@macros
  \newcommand{\cxtName}{\fcaCxtName}
\fi
%    \end{macrocode}

% \end{macro}
% \end{macro}
% \begin{macro}{\fca@cxt@att}\marg{name}
% Implementation for \cs{att}. The corresponding alias is set up
% during \cs{begin}\env{\{cxt\}}.
% \begin{macro}{\att}\marg{name}
%
% For each attribute the user must provide us a name either with
% \cs{att} or with \cs{atr}. Both save the prvided name as heading.
% For horizontally oriented attribute names (typically very short
% ones) the user should use \cs{att}.
%
% \changes{2.2}{2022/03/08}{rename \cs{att} to \cs{fca@cxt@att} and
% make it available as \cs{att} in the \env{cxt} environment, only.}
%    \begin{macrocode}
\newcommand{\fca@cxt@att}[1]{%
  \ifthenelse{\boolean{fca@cxt@ttributes}}{%
    \settoheight{\fca@cxt@ttnameheight}{#1}\adjcxt@name%
    \expandafter\def\expandafter\fca@cxt@tabtop\expandafter{%
      \fca@cxt@tabtop&#1}%
    \stepcounter{fca@cxt@mAnz}%
  }{%
    \PackageWarning{fca}{Attribute following object in
      cxt-environment%
      has been ignored}{}}%
  \ignorespaces }%
%    \end{macrocode}

% \end{macro}
% \end{macro}
% \begin{macro}{\fca@cxt@atr}\marg{name}
% Implementation for \cs{atr}. The corresponding alias is set up
% during \cs{begin}\env{\{cxt\}}.
% \begin{macro}{\atr}\marg{name}
%   The macro \cs{atr} is available only in the \env{cxt} environment.
%   it calls \cs{att} with its name rotated by 90 degrees, so that the
%   name is typeset vertically.
% \changes{2.2}{2022/03/08}{rename \cs{atr} to \cs{fca@cxt@atr} and
% make it available as \cs{atr} in the \env{cxt} environment, only.}
%    \begin{macrocode}
\newcommand{\fca@cxt@atr}[1]{\att{\rotatebox{90}{#1~~}}}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\fca@cxt@obj}\marg{crosses}\marg{objectname}
%   Implementation for \cs{obj}. The corresponding alias is set up
%   during \cs{begin}\env{\{cxt\}}.
% \begin{macro}{\obj}\marg{crosses}\marg{objectname}
%   This macro typesets an object line of a formal context inside the
%   \env{cxt} environment. The second argument \marg{objectname} is
%   the name of the objects. The first argument \marg{crosses} is a
%   line of tokens. Each token represents the contents of one cell in
%   the context table. Typically tokens contain spaces, arrows,
%   crosses. But they can be defined to represent other material as
%   well. Even multi character tokens are possible. However these are
%   not documented.%
%   \changes{2.2}{2022/03/08}{rename \cs{obj} to \cs{fca@cxt@obj} and
%   make it available as \cs{obj} in the \env{cxt} environment,
%   only.}%
%   \changes{2.2}{2022/03/11}{avoid usage of \cs{setboolean} in
%   \cs{fca@cxt@obj}}%
%    \begin{macrocode}
\newcommand{\fca@cxt@obj}[2]{%
  \fca@cxt@tabdef
  #2\strut
  \fca@cxt@Zeile{#1}%
  \\
}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\fca@cxt@freeobj}\marg{columns}\marg{name}
%   Implementation for \cs{freeobj}. The corresponding alias is set up
%   during \cs{begin}\env{\{cxt\}}.
% \begin{macro}{\freeobj}\marg{columns}\marg{name}
%   This macro allows to typeset any material in the incidence area of the
%   context. The second argument is typeset in the name column of the
%   context, while the first one occures inside the incidence area of the
%   context. The different fields in the first argument must be
%   separated as usual by |&|.
% \changes{2.2}{2022/03/08}{rename \cs{freeobj} to \cs{fca@cxt@freeobj} and
% make it available as \cs{freeobj} in the \env{cxt} environment, only.}
%
%    \begin{macrocode}
\newcommand{\fca@cxt@freeobj}[2]{%acrocod}
  \fca@cxt@tabdef%
  #2&#1\\\hline }%
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%
% \begin{macro}{\fca@cxt@tabtop}
%   Material that is typeset above a context line.
%
%   At the beginning this macro contains the table header. Later it is
%   used to typeset the lines between the objects.
%
%   The Table heading for the attributes will be filled by |\att| and
%   |\atr| during the attribute section of the formal context. The
%   first |\obj| will use it.
%   \changes{2.2}{2022/03/11}{use \cs{fca@cxt@tabtop} also for storing
%   the \cs{hline} between the objects.}
%    \begin{macrocode}
\def\fca@cxt@tabtop{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fca@cxt@tabdef}
% \begin{macro}{\fca@cxt@tabdef@@}
%   Expand \cs{fca@cxt@align} as argument to \cs{fca@cxt@tabdef@}.
%
%   At the begin of a \env{cxt} environment \cs{fca@cxt@tabdef} set to
%   be an alias of \cs{fca@cxt@tabdef@@}. As soon as
%   \cs{fca@cxt@tabdef} is executed, this macro is set to \cs{relax}.
%
%   It is executed at the end of the cxt environment so that we can
%   typeset contexts without any objects.
%
%   \changes{2.2}{2022/03/11}{move generation of 1st line into \cs{fca@cxt@tabdef@@}}
%    \begin{macrocode}
\def\fca@cxt@tabdef@@{%
  \expandafter\fca@cxt@tabdef@\fca@cxt@align
  \fca@cxtn@me%&%
  \fca@cxt@tabtop\strut\\\hline\hline
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\fca@cxt@tabdef@}\marg{alignment}
%   Do the work of \cs{fca@cxt@tabdef}: Open the tabular
%   environment. The parameter \marg{alignment} will be used to set
%   the vertiacal alignment of the context. See the documentation of
%   the |tabular| environment for further documentation.
%
%   Note: We must do all definitions outside of the tabular
%   environment.
%    \begin{macrocode}
\def\fca@cxt@tabdef@#1{%
  \def\fca@cxt@tabdef{\hline}%
  \tabcolsep0.5ex\relax%
  \begin{tabular}[#1]{|l||*{\value{fca@cxt@mAnz}}{c|}}%
    \hline%
    }%
%    \end{macrocode}
% \end{macro}
% \begin{environment}{cxt}\oarg{alignment}
%
%   The \env{cxt} environment. During setup a set of macros are
%   defined, and a new group is opened. The alignment argument is
%   saved. During the the first call to \cs{obj} a tabular environment
%   will be opened by calling \cs{fca@cxt@tabdef}.
%    At the end of the environment the tabular environment
%    is closed.
%
%   Here we test empty contexts. They should work, but don't need to
%   be documented:
% \begin{dtxexample}{A formal context without objects.}
%   \begin{cxt}
%     \cxtName{Formula 1}
%   %
%     \att{1.}
%     \att{2.}
%     \atr{disqualified}
%   %
%   \end{cxt}
% \end{dtxexample}
% \begin{dtxexample}{A formal context without attributes.}
%   \begin{cxt}
%     \cxtName{Formula 1}
%   %
%     \obj{}{Hamilton}
%     \obj{}{Alonso}
%     \obj{}{Massa}
%   \end{cxt}
% \end{dtxexample}
%
% \begin{dtxexample}{An empty named context.}
%   \begin{cxt}
%     \cxtName{Formula 0}
%   \end{cxt}
% \end{dtxexample}
%
% \begin{dtxexample}{An empty \env{cxt} environment.}
%   \begin{cxt}
%   \end{cxt}
% \end{dtxexample}
%
%
%    \begin{macrocode}
    \newenvironment{cxt}[1][t]{%
    \begingroup
    \fca@cxt@resetDefaults
    \def\fca@cxt@align{#1}%
    \ignorespaces
    }{%
    \fca@cxt@tabdef% open the tabular in case there are no objects
  \end{tabular}%
  \endgroup }%
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\fca@cxt@resetDefaults}
%   Initialize macros an registered that are used in a formal context.
%   This macro is called at \cs{begin}\env{\{cxt\}}.
%    \begin{macrocode}
\newcommand{\fca@cxt@resetDefaults}{%
  \setlength{\fca@cxt@nameraise}{0pt}%
  \setlength{\fca@cxt@ttnameheight}{0pt}%
  \setcounter{fca@cxt@mAnz}{0}%
  \setboolean{fca@cxt@ttributes}{true}%
  \let\cxtName\fcaCxtName
  \let\alignBottom\fcaCxtAlignBottom
  \let\alignCenter\fcaCxtAlignCenter
  \let\alignTop \fcaCxtAlignTop
  \let\att\fca@cxt@att
  \let\atr\fca@cxt@atr
  \let\obj\fca@cxt@obj
  \let\freeobj\fca@cxt@freeobj
  \def\fca@cxtn@me{}%
  \let\fca@cxt@tabdef\fca@cxt@tabdef@@
}%
%    \end{macrocode}
%
% \end{macro}
%
% \subsubsection{Defining the characters in a context.}
% \begin{macro}{\cxtphantom}
% This macro creates the horizontal space that would have been taken
% by a cross in the context. It is used to properly position other
% signs in the table without modifying the spacing.
%    \begin{macrocode}
\def\cxtphantom{\phantom{\fca@cxt@Kreuz}}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\cxtrlap}
%    This macro is inspired by \cs{rlap}. It creates a box that is as
%    wide as \cs{cxtphantom} and centers its argument.
%    \begin{macrocode}
\def\cxtrlap#1{%
  \settowidth\@tempdima{\cxtphantom}%
  \makebox[\@tempdima][c]{\hss #1\hss}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\fca@cxt@M@kechar@newcommand}
% Bundle \cs{newcommand} and the following star in one token.
%    \begin{macrocode}
\def\fca@cxt@M@kechar@newcommand{%
  \newcommand*%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\fca@cxt@Makechar@newcommand}\marg{character}\oarg{nargs}\oarg{optargdefault}\marg{defn}
% Defines a macro named \cs{cxt@char@}\meta{character}.
%    \begin{macrocode}
\def\fca@cxt@Makechar@newcommand#1{%
  \expandafter \fca@cxt@M@kechar@newcommand \csname cxt@char@\string#1
  \endcsname }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\cxtMakeChar}\marg{character}\oarg{nargs}\oarg{optargdefault}\marg{defn}
% Define a new character to be used in context. The syntax is the same
% as with \cs{newcommand*}. See the latex documentation (e.g. type
% “\cmds{texdoc latex2e}” in the command line) for details.
%
% This macro cannot be simply delegated to \cs{newcammand*} as we want
% to keep the freedom of using arbitrary arguments for the defined
% characters. Thus, we must add a macro at the end that executes the
% next character if possible.
%
% As we want to pass only the actually given optional arguments to
% \cs{newcommand*}, we must analyse the structure of the
% arguments. The involved helper macros describe nodes in the syntax
% tree. At each possible position of an optional argument,
% \cs{@ifnextchar} is used to check whether the next token is an
% opening bracket. Depending on the result one of two branches are
% taken in the decition tree. At each leave
% \cs{fca@cxt@Makechar@newcommand} is called with the corresponding
% sequence of arguments and \cs{fca@cxt@readline} is appended to the
% macro definition.
%    \begin{macrocode}
\def\cxtM@keChar#1[#2][#3]#4{%
  \fca@cxt@Makechar@newcommand{#1}[{#2}][{#3}]{#4\fca@cxt@readline}%
}
\def\cxtMakeCh@r#1[#2]#3{%
  \fca@cxt@Makechar@newcommand{#1}[{#2}]{#3\fca@cxt@readline}%
}
\def\cxtMakeChar@@#1[#2]{%
  \@ifnextchar[{\cxtM@keChar{#1}[{#2}]}{\cxtMakeCh@r{#1}[{#2}]}%]
}
\def\cxtMakeChar@#1#2{%
  \fca@cxt@Makechar@newcommand{#1}{#2\fca@cxt@readline}%
}
\def\cxtMakeChar#1{%
  \@ifnextchar[{\cxtMakeChar@@{#1}}{\cxtMakeChar@{#1}}%]
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Reading context lines}
% \begin{macro}{\fca@cxt@stop}
%   This macro does nothing. It is used for checking emptiness when a
%   context line is parsed.
%    \begin{macrocode}
\def\fca@cxt@stop{}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fca@cxt@executechar}\marg{character}
% This macro switches to the next table column and executes
% \cs{cxt@char@}\meta{character} if that macro exists otherwise it
% uses the default macro for empty cells.
%
%    \begin{macrocode}
\def\fca@cxt@executechar#1{%
  &\@ifundefined{cxt@char@\string#1 }{%
    \PackageWarning{fca}{Undefinded character \string#1 \space in the context}%
    \let\fca@cxt@tmp=\fca@cxt@aPunkt%
  }{%
    \expandafter\let\expandafter\fca@cxt@tmp \csname
    cxt@char@\string#1 \endcsname }%
  \fca@cxt@tmp }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\fca@cxt@readline}\marg{firstchar}
% This macro reads one token and executes the corresponding context
% character macro. The specital token \cs{fca@cxt@stop} is used to
% mark the end of the context line.
%    \begin{macrocode}
\def\fca@cxt@readline#1{%
  \ifx#1\fca@cxt@stop
    \let\fca@cxt@zeile@excecutechar\@gobble
  \else
    \let\fca@cxt@zeile@excecutechar\fca@cxt@executechar
  \fi
  \fca@cxt@zeile@excecutechar{#1}%
}%
\def\fca@cxt@Zeile#1{%
  \fca@cxt@readline#1\fca@cxt@stop }%
%    \end{macrocode}
%
% \end{macro}
%
% \changes{2.2}{2022/03/14}{Remove \cs{cxt@aKreuz}, \cs{cxt@aup},
% \cs{cxt@adown} and \cs{cxt@aboth}. These macros are replaced by
% calls to \cs{cxtMakeChar}.}
%
% \subsubsection{The context characters}
% Now, it is time to define some characters for the contexts:
% \begin{description}
% \ItemDescribeOther[context character]{.} An empty context cell.
% \ItemDescribeOther[context character]{x} A cross in the contet.
% \ItemDescribeOther[context character]{X} Alternative singn for a cross.
% \ItemDescribeOther[context character]{u} An up-arrow in the context.
% \ItemDescribeOther[context character]{d} A down-arrow in the context.
% \ItemDescribeOther[context character]{b} A cell containing both an
% up- and a down-arrow.
% \ItemDescribeOther[context character]{0} A zero in a many-valued context.
% \ItemDescribeOther[context character]{1} A one in a many-valued context.
% \ItemDescribeOther[context character]{2} Two in a many-valued context.
% \ItemDescribeOther[context character]{3} Three in a many-valued context.
% \ItemDescribeOther[context character]{4} Four in a many-valued context.
% \ItemDescribeOther[context character]{5} Five in a many-valued context.
% \ItemDescribeOther[context character]{6} Six in a many-valued context.
% \ItemDescribeOther[context character]{7} Seven in a many-valued context.
% \ItemDescribeOther[context character]{8} Eight in a many-valued context.
% \ItemDescribeOther[context character]{9} Nine in a many-valued context.
% \end{description}
% 
%    \begin{macrocode}
\cxtMakeChar .{\cxtphantom}
\cxtMakeChar x{\fca@cxt@Kreuz}
\cxtMakeChar X{\fca@cxt@Kreuz}
\cxtMakeChar u{\cxtrlap{\fca@cxt@up}}
\cxtMakeChar d{\cxtrlap{\fca@cxt@down}}
\cxtMakeChar b{\cxtrlap{\fca@cxt@both}}
\@for\tmp:= 0,1,2,3,4,5,6,7,8,9\do{
  \edef\@tmp{
    \noexpand\cxtMakeChar\tmp{%
      \noexpand\cxtrlap\tmp
    }%
  }%
  \@tmp
}
%    \end{macrocode}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
% end of cxt environment definition                                           %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \iffalse
%    \begin{macrocode}
%</fca.sty>
%    \end{macrocode}
% \fi
% \iffalse
%    \begin{macrocode}
%<*cxtinput.sty>
%    \end{macrocode}
% \fi
% \subsection{Reading Burmeister context files}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
% This is file `cxtinput.sty' : LaTeX macros for Formal Concept Analysis      %
%     input of Burmeister format contexts                                     %
%                                                                             %
%      Copyright  Tobias Schlemmer 5/09                                       %
%      Version of                  1/12                                       %
%                                                                             %
%  This program is provided under the terms of the                            %
%  LaTeX Project Public License distributed from CTAN                         %
%  archives in directory macros/latex/base/lppl.txt.                          %
%                                                                             %
%  This package defines the macro |\cxtinput|, which can input a context        %
%  file in Burmeister format                                                  %
%                                                                             %
%  Usage:                                                                      %
% \begin{verbatim}
% \begin{cxt}                                                                 %
% \cxtAlignBottom                                                             %
% \end{cxt}                                                                   %
% \end{verbatim}
%                                                                             %
% Known bugs:                                                                 %
% • The end of the .cex file is not correctly detected.                       %
%   You will get the error message: Runaway argument?                         %
%    ! File ended while scanning use of |\fca@cxt@input@getline|.                   %
%                                                                             %
% TODO:                                                                       %
% • Make everything configurable                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
% We extend the fca package
%
%    \begin{macrocode}
\RequirePackage{fca}%
%    \end{macrocode}
%
% used counters
%
%    \begin{macrocode}
\newcount\fca@cxt@input@obj
\newcount\fca@cxt@input@attr
\newcount\fca@cxt@input@line
\newtoks\fca@cxt@input@contextlines
\fca@cxt@input@line0
\fca@cxt@input@contextlines{}%
%    \end{macrocode}
%
% The end user macro
%
%    \begin{macrocode}%
\newcommand\cxtinput[1]{%
%  \begingroup
  \fca@cxt@input@contextlines{}%
  \fca@cxt@input@save@nl@active%
  \fca@cxt@input@make@nl@active%
  \fca@cxt@input@input{#1}%
  \fca@cxt@input@restore@nl%
  \xdef\fca@cxt@input@tempa{\the\fca@cxt@input@contextlines}%
  %\aftergroup
  \fca@cxt@input@tempa%
%  \endgroup%
}
%    \end{macrocode}
%
% Macro holding the command for the next line
%
%    \begin{macrocode}
\def\fca@cxt@input@newline{}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\fca@cxt@input@head{%
 \fca@cxt@input@getline\fca@cxt@input@check@B
}
%    \end{macrocode}
%
% Check the “B” at the beginning of the file
%
%    \begin{macrocode}
\def\fca@cxt@input@check@B#1{%
  \def\tempa{B}\def\tempb{#1}%
  \ifx\tempa\tempb
  \typeout{Burmeister format detected}%
  \else
    \fca@cxt@input@error{No Burmeister format detected}{The \string\cxtinput macro can input Burmeister .cxt files only.}%
  \fi
  \def\fca@cxt@input@newline{%
    \fca@cxt@input@getline{\fca@cxt@input@match@mptyline\fca@cxt@input@readobjcount}%
  }%
}
%    \end{macrocode}
%
% Check for an empty line and continue with command \#2 afterwards
%
%    \begin{macrocode}
\def\fca@cxt@input@match@mptyline#1#2{%
  \edef\tempa{#2}%
  \ifx\tempa\@empty
 \else
    \fca@cxt@input@error{Error in Burmeister format.}{At the current position an empty line is expected.}%
  \fi
  \def\fca@cxt@input@newline{%
    \fca@cxt@input@getline{#1}%
  }%
}
%    \end{macrocode}
%
% Read number of objects from the file
%
%    \begin{macrocode}
\def\fca@cxt@input@readobjcount#1{%
 \fca@cxt@input@obj=#1\relax
 \def\fca@cxt@input@newline{%
   \fca@cxt@input@getline\fca@cxt@input@readattrcount%
 }%
}
%    \end{macrocode}
%
% Read number of attributes
%
%    \begin{macrocode}
\def\fca@cxt@input@readattrcount#1{%
  \def\fca@cxt@input@newline{%
    \fca@cxt@input@getline{\fca@cxt@input@match@mptyline\fca@cxt@input@readobjects}%
  }%
  \fca@cxt@input@attr=#1\relax
}
%    \end{macrocode}
%
% initializes the reading of the object names
%
%    \begin{macrocode}
\def\fca@cxt@input@readobjects{%
  \ifnum\fca@cxt@input@obj>0\relax
    \def\fca@cxt@input@newline{%
      \fca@cxt@input@getline\fca@cxt@input@readobjname
   }%
   \@tempcnta=1\relax
   \let\tempa\fca@cxt@input@readobjname%
 \else
    \let\tempa\fca@cxt@input@readattributes%
  \fi
 \tempa
}
%    \end{macrocode}
%
% Read the object names
%
%    \begin{macrocode}
\def\fca@cxt@input@readobjname#1{%
   \expandafter\def\csname cxt@input@objname@\the\@tempcnta\endcsname{#1}%
   \ifnum\@tempcnta < \fca@cxt@input@obj
    \advance\@tempcnta by 1\relax
 \else
    \def\fca@cxt@input@newline{%
      \fca@cxt@input@getline\fca@cxt@input@readattributes%
    }%
  \fi
}
%    \end{macrocode}
%
% Initialize reading of attibute names
%
%    \begin{macrocode}
\def\fca@cxt@input@readattributes{%
  \ifnum\fca@cxt@input@attr>0\relax
    \def\fca@cxt@input@newline{%
      \fca@cxt@input@getline\fca@cxt@input@readattrname
    }%
    \@tempcnta=1\relax
    \def\tempa{\fca@cxt@input@readattrname}%
  \else
    \def\tempa{\fca@cxt@input@readcontext}%
  \fi
  \tempa
}
%    \end{macrocode}
% Read the attribute names and store |\atr| macros for each attribute
%    \begin{macrocode}
\def\fca@cxt@input@readattrname#1{%
  \fca@cxt@input@appendtotok{#1}\atr%
  \ifnum\@tempcnta < \fca@cxt@input@attr
    \advance\@tempcnta by 1\relax
  \else
    \def\fca@cxt@input@newline{%
      \fca@cxt@input@getline\fca@cxt@input@readcontext
    }%
  \fi
}
%    \end{macrocode}
%
% initalize reading of the cross table
%
%    \begin{macrocode}
\def\fca@cxt@input@readcontext{%
  \ifnum\fca@cxt@input@obj>0\relax
    \def\fca@cxt@input@newline{%
      \fca@cxt@input@getline
      \fca@cxt@input@readcontextline
    }%
    \@tempcnta=1\relax
    \def\tempa{\fca@cxt@input@readcontextline}%
  \else
    \def\tempa{}%
  \fi
  \tempa
}
%    \end{macrocode}
%
% Read cross table and store |\obj| macros for each object
%
%    \begin{macrocode}
\def\fca@cxt@input@readcontextline#1{%
  \expandafter\expandafter\expandafter\fca@cxt@input@appendtotok
  \expandafter\expandafter\expandafter{%
    \csname cxt@input@objname@\the\@tempcnta\endcsname}%
  {\obj{#1}}%
  \ifnum\@tempcnta < \fca@cxt@input@obj
    \advance\@tempcnta by 1\relax
  \else
    \let\fca@cxt@input@newline\relax
    \let\fca@cxt@input@endoffile\relax
  \fi
}
%    \end{macrocode}
%
% add some stuff to the token register
% needed to have some tool, which can be used with |\expandierter|
%
%    \begin{macrocode}
\def\fca@cxt@input@appendtotok#1#2{%
  \expandafter\fca@cxt@input@contextlines\expandafter{%
    \the\fca@cxt@input@contextlines
    #2{#1}%
  }%
}

\def\fca@cxt@input@error#1#2{%
  \PackageError{cxtinput}{At line \the\fca@cxt@input@line : #1}{#2}%
  \def\fca@cxt@input@newline{}%
}%
%    \end{macrocode}
%
% Some end of file mark
%
%    \begin{macrocode}
\def\fca@cxt@input@endoffile{%
  \fca@cxt@input@error{unexpected end of file}{The context file is somehow
    inconsistent.\MessageBreak The last lines of it seem to be lost.}%
}
%    \end{macrocode}
%
% macro for usage with |\ifx|
%
%    \begin{macrocode}
\def\fca@cxt@input@@endoffile{\fca@cxt@input@endoffile}
%    \end{macrocode}
%
% swich catcode of newline to runtime mode
%
%    \begin{macrocode}
\begingroup%
\catcode`\^^M\active%
%    \end{macrocode}
%
% Define a macro to save the catcode.
% Define a macro to set the catcode.
%
%    \begin{macrocode}
\gdef\fca@cxt@input@make@nl@active{%
  \catcode`\^^M\active%
% \let\fca@cxt@input@oldcr^^M%
% \def^^M{\fca@cxt@input@newline}%
}%

\gdef\fca@cxt@input@save@nl@active{%
  \chardef\fca@cxt@input@catcode@nl=\catcode`\^^M%
% \let\fca@cxt@input@oldcr^^M%
% \def^^M{\fca@cxt@input@newline}%
}%
%    \end{macrocode}
%
% Define a macro to set the catcode.
%
%    \begin{macrocode}
\gdef\fca@cxt@input@restore@nl{%
  \catcode`\^^M\fca@cxt@input@catcode@nl\relax%
% \let\fca@cxt@input@oldcr^^M%
% \def^^M{\fca@cxt@input@newline}%
}%

\fca@cxt@input@make@nl@active%
%    \end{macrocode}
%
% reads a line from the context file.
%
%    \begin{macrocode}
\long\gdef\fca@cxt@input@getline #1#2^^M{%
  \advance\fca@cxt@input@line by 1\relax%
  \def\tempa{#2}%
  \ifx\tempa\fca@cxt@input@@endoffile%
    \tempa%
  \fi%
  #1{#2}%
  \fca@cxt@input@newline%
}%
%    \end{macrocode}
%
% read the inputfile and use its content as argument for
% |\fca@cxt@input@head|
%
%    \begin{macrocode}
\gdef\fca@cxt@input@input#1{%
  \expandafter\fca@cxt@input@head\@@input #1 %
  \fca@cxt@input@endoffile%
}
%    \end{macrocode}
%
% restore newline catcode
%
%    \begin{macrocode}
\endgroup%
%    \end{macrocode}
% \iffalse
%    \begin{macrocode}
%</cxtinput.sty>
%    \end{macrocode}
% \fi
% \iffalse
%    \begin{macrocode}
%<*fca.sty>
%    \end{macrocode}
% \fi
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \section{Environment \env{diagram} for making
%            diagrams of ordered sets, graphs and concept lattices}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% To obtain a diagram for the concept lattice of the formal
% context above, try this:
%
%
% \begin{dtxexample}{A lattice diagram}
% {\unitlength 1.2mm
% \begin{diagram}{40}{55}
%   \Node{1}{20}{10}
%   \Node{2}{35}{20}
%   \Node{3}{5}{30}
%   \Node{4}{35}{40}
%   \Node{5}{20}{50}
%   \Edge{1}{2}
%   \Edge{1}{3}
%   \Edge{2}{4}
%   \Edge{3}{5}
%   \Edge{4}{5}
%   \leftAttbox{3}{2}{2}{1.}
%   \rightAttbox{2}{2}{2}{disqualified}
%   \rightAttbox{4}{2}{2}{2.}
%   \leftObjbox{3}{2}{2}{Alonso}
%   \rightObjbox{2}{2}{2}{Montoya}
%   \rightObjbox{4}{2}{2}{Schumacher}
% \end{diagram}}
% \end{dtxexample}
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
% The syntax of the commands is                                               %
%                                                                             %
% \begin{verbatim}
% \begin{diagram}{width}{height}                                              %
%                                                                             %
%   \Node{number}{xcoordinate}{ycoordinate} % (nodenumbers from 0 to 50)      %
%                                                                             %
%   \Edge{nodenumber1}{nodenumber2}                                           %
%                                                                             %
%   \leftAttbox{nodenumber}{xoffset}{yoffset}{text1 \\ text2 \\ ... }         %
%                                                                             %
%   similarly: \rightAttbox, \centerAttbox,                                   %
%   \leftObjbox,  \centerObjbox,                                              %
%   \rightObjbox.                                                             %
%                                                                             %
% \end{diagram}
% \end{verbatim}
%                                                                             %
% The circle size can be changed with the |\fcaCircleSize| command.                %
% The value must be a positive integer, which will be mutiplied               %
% by |\unitlength|. The default is                                              %
%                                                                             %
% |\fcaCircleSize{4}|.                                                             %
%                                                                             %
% A helpful command when fine tuning a diagram is                             %
%                                                                             %
% |\Numbers|.                                                                   %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
% You may wish to permanently adjust the following values to your             %
% personal preferences. They can also be changed inside each diagram          %
% environment using |\renewcommand|.                                            %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    \begin{macrocode}
\newcommand{\fca@Defaults}{% Do not change this line!  %
  \newcommand{\ObjectLabelStyle}{\small\baselineskip6pt\rm}% %
  \newcommand{\AttributeLabelStyle}{\small\baselineskip6pt\it}% %
  \newcommand{\LabelBoxWidth}{40mm}%
  \let\Node\fca@node
  \let\Edge\fca@edge
  \iffca@compat@macros
  \else
    \let\EdgeThickness\fcaEdgeThickness
    \let\NodeThickness\fcaNodeThickness
    \let\Numbers\fcaNumbers
    \let\NodeColor\fcaNodeColor
  \fi
  \let\leftAttbox\fca@leftAttbox
  \let\centerAttbox\fca@centerAttbox
  \let\rightAttbox\fca@rightAttbox
  \let\leftObjbox\fca@leftObjbox
  \let\centerObjbox\fca@centerObjbox
  \let\rightObjbox\fca@rightObjbox
}% %
\newboolean{fca@dots}\setboolean{fca@dots}{true}% %
\iffca@compat@macros
  \newcommand{\diagramXoffset}{0}% %
  \newcommand{\diagramYoffset}{0}% %
  \newcommand{\fcaDiagramXoffset}{\diagramXoffset}% %
  \newcommand{\fcaDiagramYoffset}{\diagramYoffset}% %
\else
  \newcommand{\fcaDiagramXoffset}{0}% %
  \newcommand{\fcaDiagramYoffset}{0}% %
\fi
\newcommand*{\fca@edgethickness}{.8pt}% %
\newcommand*{\fca@nodethickness}{1pt}% %
\newcommand*{\fca@nodecolor}{white}% %
\newcommand*{\fca@nodename}{fca node }%
\newcommand*{\fca@nodeshape}{circle}%
%    \end{macrocode}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
% Changing the default values                                                 %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    \begin{macrocode}
\pgfqkeys{/fca/node}{%
  thickness/.initial=1pt,
  thickness/.value required,
  color/.initial={white},
  color/.value required,
  numbers/.is if=fca@CircledNumbers,
  radius/.initial=1\unitlength,
  radius/.value required,
  label at/.initial=center,
  label at/.value required,
  label anchor/.initial=center,
  label anchor/.value required,
  label shift/x/.initial=0pt,
  label shift/y/.initial=0pt,
  label shift/.value required,
  label shift/.style args={(#1,#2)}{%
    label shift/x=#1,
    label shift/y=#2
  },%
  type/.initial=attribute,
  type/.is choice,
  type/attribute/.code={
    \pgfkeyssetvalue{/fca/node/type}{attribute}
    \pgfqkeys{/fca/node/}{attribute position}{\pgfkeysgetvalue{}}

  },
  position/.initial=center,
  position/.code={%
    \pgfqkeys{/fca/node}{%
      \pgfkeysqgetvalue{/fca/node}{type} #1}%
    \pgfkeyssetvalue{/fca/node/\pgfkeysgetvalue{/fca/node/type} position}{}
  }
  left/.style={position=left},
  right/.style={position=right},
  center/.style={position=center},
  attribute position/.is choice,
  attribute position/left/.style={
    label at=north west,
    label anchor=south east
  },
  attribute position/center/.style={
    label at=north,
    label anchor=south
  },
  attribute position/right/.style={
    label at=north east,
    label anchor=south west
  },
  attribute/.code={
    \pgfqkeys{/fca/node}{%
      label type=attribute
    }
    \ifx\pgfnovalue#1\relax
      \pgfqkeys{/fca/node}{attribute position=\pgfkeysqgetvalue{/fca/node/position}}
    \else
      \pgfqkeys{/fca/node}{attribute position={#1}}
    \fi
  },
  object position/.is choice,
  object position/left/.style={
    label at=south west,
    label anchor=north east
  },
  object position/center/.style={
    label at=south,
    label anchor=north
  },
  object position/right/.style={
    label at=south east,
    label anchor=north west
  },
  object/.code={
    \pgfqkeys{/fca/node}{%
      label type=object
    }
    \ifx\pgfnovalue#1\relax
      \pgfqkeys{/fca/node}{object position=center}
    \else
      \pgfqkeys{/fca/node}{object position={#1}}
    \fi
  },
}
\newcommand*{\fcaNodeThickness}[1]{\pgfkeyssetvalue{/fca/node/thickness}{#1}}% %
\newcommand*{\fcaEdgeThickness}[1]{\def\fca@edgethickness{#1}}% %
\newcommand*{\fcaNodeColor}[1]{\pgfkeyssetvalue{/fca/node/color}{#1}}% %
\newcommand*{\fcaNumbers}{%
  \setboolean{fca@CircledNumbers}{true}%
  \pgfqkeys{/fca/node}{radius/.append={+2\unitlength}}%
}%
\newcommand*{\fcaCircleSize}[1]{\setcounter{fca@CircleDiameter}{#1}}%
\iffca@compat@macros
  \def\EdgeThickness{\fcaEdgeThickness}%
  \def\NodeThickness{\fcaNodeThickness}%
  \def\NodeColor{\fcaNodeColor}%
  \def\Numbers{\fcaNumbers}%
  \def\CircleSize{\fcaCircleSize}%
\fi
\pgfqkeys{/fca/edge}{%
  thickness/.code=\fcaEdgeThickness
}%
%    \end{macrocode}
% \begin{macro}{\fcaset}\marg{key value list}
%   This macro is similar to \cs{pgfkeys}, except that it
%   sets \filenm{/fca} as default path.
%    \begin{macrocode}
\newcommand*\fcaset[1]{\pgfqkeys{/fca}}
%    \end{macrocode}
% \end{macro}
%                                                                             % 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    \begin{macrocode}
\newcounter{fca@minNode}%
\newcounter{fca@maxNode}%
\newcounter{fca@runNode}%
\newboolean{fca@CircledNumbers}%
\newcounter{fca@CircleDiameter}%
\newcounter{fca@AuxCounter}%
\newcounter{fca@BuxCounter}%
\def\fca@adjNode#1{%
  \ifthenelse{#1<\value{fca@minNode}}{\setcounter{fca@minNode}{#1}}{}%
  \ifthenelse{\value{fca@maxNode}<#1}{\setcounter{fca@maxNode}{#1}}{}}%
\newcommand\fca@node{%
  \@ifnextchar\bgroup\fca@oldnode{%
      \@ifnextchar(\fca@pictnode\fca@tikznode%)
      }%
% \egroup
}
\newcommand\fca@oldnode[3]{%
  {%
    \fca@parselength\@tempdima{#2}\unitlength
    \fca@parselength\@tempdimb{#3}\unitlength
    \pgftransformshift{\pgfpoint{\@tempdima}{\@tempdimb}}%
    \pgfnode{\fca@nodeshape}{center}{}{\fca@nodename#1}{\pgfusepath{stroke}}
  }%
  \ignorespaces
}
\iffalse
\def\Node#1#2#3{\fca@adjNode{#1}\ifcase#1%
  \def\fca@xaa{#2}\def\fca@yaa{#3}\or%
  \def\fca@xab{#2}\def\fca@yab{#3}\or%
  \def\fca@xac{#2}\def\fca@yac{#3}\or%
  \def\fca@xad{#2}\def\fca@yad{#3}\or%
  \def\fca@xae{#2}\def\fca@yae{#3}\or%
  \def\fca@xaf{#2}\def\fca@yaf{#3}\or%
  \def\fca@xag{#2}\def\fca@yag{#3}\or%
  \def\fca@xah{#2}\def\fca@yah{#3}\or%
  \def\fca@xai{#2}\def\fca@yai{#3}\or%
  \def\fca@xaj{#2}\def\fca@yaj{#3}\or%
  \def\fca@xak{#2}\def\fca@yak{#3}\or%
  \def\fca@xal{#2}\def\fca@yal{#3}\or%
  \def\fca@xam{#2}\def\fca@yam{#3}\or%
  \def\fca@xan{#2}\def\fca@yan{#3}\or%
  \def\fca@xao{#2}\def\fca@yao{#3}\or%
  \def\fca@xap{#2}\def\fca@yap{#3}\or%
  \def\fca@xaq{#2}\def\fca@yaq{#3}\or%
  \def\fca@xar{#2}\def\fca@yar{#3}\or%
  \def\fca@xas{#2}\def\fca@yas{#3}\or%
  \def\fca@xat{#2}\def\fca@yat{#3}\or%
  \def\fca@xau{#2}\def\fca@yau{#3}\or%
  \def\fca@xav{#2}\def\fca@yav{#3}\or%
  \def\fca@xaw{#2}\def\fca@yaw{#3}\or%
  \def\fca@xax{#2}\def\fca@yax{#3}\or%
  \def\fca@xay{#2}\def\fca@yay{#3}\or%
  \def\fca@xaz{#2}\def\fca@yaz{#3}\or%
  \def\fca@xba{#2}\def\fca@yba{#3}\or%
  \def\fca@xbb{#2}\def\fca@ybb{#3}\or%
  \def\fca@xbc{#2}\def\fca@ybc{#3}\or%
  \def\fca@xbd{#2}\def\fca@ybd{#3}\or%
  \def\fca@xbe{#2}\def\fca@ybe{#3}\or%
  \def\fca@xbf{#2}\def\fca@ybf{#3}\or%
  \def\fca@xbg{#2}\def\fca@ybg{#3}\or%
  \def\fca@xbh{#2}\def\fca@ybh{#3}\or%
  \def\fca@xbi{#2}\def\fca@ybi{#3}\or%
  \def\fca@xbj{#2}\def\fca@ybj{#3}\or%
  \def\fca@xbk{#2}\def\fca@ybk{#3}\or%
  \def\fca@xbl{#2}\def\fca@ybl{#3}\or%
  \def\fca@xbm{#2}\def\fca@ybm{#3}\or%
  \def\fca@xbn{#2}\def\fca@ybn{#3}\or%
  \def\fca@xbo{#2}\def\fca@ybo{#3}\or%
  \def\fca@xbp{#2}\def\fca@ybp{#3}\or%
  \def\fca@xbq{#2}\def\fca@ybq{#3}\or%
  \def\fca@xbr{#2}\def\fca@ybr{#3}\or%
  \def\fca@xbs{#2}\def\fca@ybs{#3}\or%
  \def\fca@xbt{#2}\def\fca@ybt{#3}\or%
  \def\fca@xbu{#2}\def\fca@ybu{#3}\or%
  \def\fca@xbv{#2}\def\fca@ybv{#3}\or%
  \def\fca@xbw{#2}\def\fca@ybw{#3}\or%
  \def\fca@xbx{#2}\def\fca@ybx{#3}\or%
  \def\fca@xby{#2}\def\fca@yby{#3}\or%
  \def\fca@xbz{#2}\def\fca@ybz{#3}\fi}%
\def\fca@getNode#1{%
  \ifcase#1%
  \def\fca@x{\fca@xaa}\or\def\fca@x{\fca@xab}\or\def\fca@x{\fca@xac}\or%
  \def\fca@x{\fca@xad}\or\def\fca@x{\fca@xae}\or\def\fca@x{\fca@xaf}\or%
  \def\fca@x{\fca@xag}\or\def\fca@x{\fca@xah}\or\def\fca@x{\fca@xai}\or%
  \def\fca@x{\fca@xaj}\or\def\fca@x{\fca@xak}\or\def\fca@x{\fca@xal}\or%
  \def\fca@x{\fca@xam}\or\def\fca@x{\fca@xan}\or\def\fca@x{\fca@xao}\or%
  \def\fca@x{\fca@xap}\or\def\fca@x{\fca@xaq}\or\def\fca@x{\fca@xar}\or%
  \def\fca@x{\fca@xas}\or\def\fca@x{\fca@xat}\or\def\fca@x{\fca@xau}\or%
  \def\fca@x{\fca@xav}\or\def\fca@x{\fca@xaw}\or\def\fca@x{\fca@xax}\or%
  \def\fca@x{\fca@xay}\or\def\fca@x{\fca@xaz}\or%
  \def\fca@x{\fca@xba}\or\def\fca@x{\fca@xbb}\or\def\fca@x{\fca@xbc}\or%
  \def\fca@x{\fca@xbd}\or\def\fca@x{\fca@xbe}\or\def\fca@x{\fca@xbf}\or%
  \def\fca@x{\fca@xbg}\or\def\fca@x{\fca@xbh}\or\def\fca@x{\fca@xbi}\or%
  \def\fca@x{\fca@xbj}\or\def\fca@x{\fca@xbk}\or\def\fca@x{\fca@xbl}\or%
  \def\fca@x{\fca@xbm}\or\def\fca@x{\fca@xbn}\or\def\fca@x{\fca@xbo}\or%
  \def\fca@x{\fca@xbp}\or\def\fca@x{\fca@xbq}\or\def\fca@x{\fca@xbr}\or%
  \def\fca@x{\fca@xbs}\or\def\fca@x{\fca@xbt}\or\def\fca@x{\fca@xbu}\or%
  \def\fca@x{\fca@xbv}\or\def\fca@x{\fca@xbw}\or\def\fca@x{\fca@xbx}\or%
  \def\fca@x{\fca@xby}\or\def\fca@x{\fca@xbz}\fi%
  \ifcase#1%
  \def\fca@y{\fca@yaa}\or\def\fca@y{\fca@yab}\or\def\fca@y{\fca@yac}\or%
  \def\fca@y{\fca@yad}\or\def\fca@y{\fca@yae}\or\def\fca@y{\fca@yaf}\or%
  \def\fca@y{\fca@yag}\or\def\fca@y{\fca@yah}\or\def\fca@y{\fca@yai}\or%
  \def\fca@y{\fca@yaj}\or\def\fca@y{\fca@yak}\or\def\fca@y{\fca@yal}\or%
  \def\fca@y{\fca@yam}\or\def\fca@y{\fca@yan}\or\def\fca@y{\fca@yao}\or%
  \def\fca@y{\fca@yap}\or\def\fca@y{\fca@yaq}\or\def\fca@y{\fca@yar}\or%
  \def\fca@y{\fca@yas}\or\def\fca@y{\fca@yat}\or\def\fca@y{\fca@yau}\or%
  \def\fca@y{\fca@yav}\or\def\fca@y{\fca@yaw}\or\def\fca@y{\fca@yax}\or%
  \def\fca@y{\fca@yay}\or\def\fca@y{\fca@yaz}\or%
  \def\fca@y{\fca@yba}\or\def\fca@y{\fca@ybb}\or\def\fca@y{\fca@ybc}\or%
  \def\fca@y{\fca@ybd}\or\def\fca@y{\fca@ybe}\or\def\fca@y{\fca@ybf}\or%
  \def\fca@y{\fca@ybg}\or\def\fca@y{\fca@ybh}\or\def\fca@y{\fca@ybi}\or%
  \def\fca@y{\fca@ybj}\or\def\fca@y{\fca@ybk}\or\def\fca@y{\fca@ybl}\or%
  \def\fca@y{\fca@ybm}\or\def\fca@y{\fca@ybn}\or\def\fca@y{\fca@ybo}\or%
  \def\fca@y{\fca@ybp}\or\def\fca@y{\fca@ybq}\or\def\fca@y{\fca@ybr}\or%
  \def\fca@y{\fca@ybs}\or\def\fca@y{\fca@ybt}\or\def\fca@y{\fca@ybu}\or%
  \def\fca@y{\fca@ybv}\or\def\fca@y{\fca@ybw}\or\def\fca@y{\fca@ybx}\or%
  \def\fca@y{\fca@yby}\or\def\fca@y{\fca@ybz}\fi}%
\def\fca@getNodeb#1{\ifcase#1%
  \def\fca@u{\fca@xaa}\or\def\fca@u{\fca@xab}\or\def\fca@u{\fca@xac}\or%
  \def\fca@u{\fca@xad}\or\def\fca@u{\fca@xae}\or\def\fca@u{\fca@xaf}\or%
  \def\fca@u{\fca@xag}\or\def\fca@u{\fca@xah}\or\def\fca@u{\fca@xai}\or%
  \def\fca@u{\fca@xaj}\or\def\fca@u{\fca@xak}\or\def\fca@u{\fca@xal}\or%
  \def\fca@u{\fca@xam}\or\def\fca@u{\fca@xan}\or\def\fca@u{\fca@xao}\or%
  \def\fca@u{\fca@xap}\or\def\fca@u{\fca@xaq}\or\def\fca@u{\fca@xar}\or%
  \def\fca@u{\fca@xas}\or\def\fca@u{\fca@xat}\or\def\fca@u{\fca@xau}\or%
  \def\fca@u{\fca@xav}\or\def\fca@u{\fca@xaw}\or\def\fca@u{\fca@xax}\or%
  \def\fca@u{\fca@xay}\or\def\fca@u{\fca@xaz}\or%
  \def\fca@u{\fca@xba}\or\def\fca@u{\fca@xbb}\or\def\fca@u{\fca@xbc}\or%
  \def\fca@u{\fca@xbd}\or\def\fca@u{\fca@xbe}\or\def\fca@u{\fca@xbf}\or%
  \def\fca@u{\fca@xbg}\or\def\fca@u{\fca@xbh}\or\def\fca@u{\fca@xbi}\or%
  \def\fca@u{\fca@xbj}\or\def\fca@u{\fca@xbk}\or\def\fca@u{\fca@xbl}\or%
  \def\fca@u{\fca@xbm}\or\def\fca@u{\fca@xbn}\or\def\fca@u{\fca@xbo}\or%
  \def\fca@u{\fca@xbp}\or\def\fca@u{\fca@xbq}\or\def\fca@u{\fca@xbr}\or%
  \def\fca@u{\fca@xbs}\or\def\fca@u{\fca@xbt}\or\def\fca@u{\fca@xbu}\or%
  \def\fca@u{\fca@xbv}\or\def\fca@u{\fca@xbw}\or\def\fca@u{\fca@xbx}\or%
  \def\fca@u{\fca@xby}\or\def\fca@u{\fca@xbz}\fi%
  \ifcase#1%
  \def\fca@v{\fca@yaa}\or\def\fca@v{\fca@yab}\or\def\fca@v{\fca@yac}\or%
  \def\fca@v{\fca@yad}\or\def\fca@v{\fca@yae}\or\def\fca@v{\fca@yaf}\or%
  \def\fca@v{\fca@yag}\or\def\fca@v{\fca@yah}\or\def\fca@v{\fca@yai}\or%
  \def\fca@v{\fca@yaj}\or\def\fca@v{\fca@yak}\or\def\fca@v{\fca@yal}\or%
  \def\fca@v{\fca@yam}\or\def\fca@v{\fca@yan}\or\def\fca@v{\fca@yao}\or%
  \def\fca@v{\fca@yap}\or\def\fca@v{\fca@yaq}\or\def\fca@v{\fca@yar}\or%
  \def\fca@v{\fca@yas}\or\def\fca@v{\fca@yat}\or\def\fca@v{\fca@yau}\or%
  \def\fca@v{\fca@yav}\or\def\fca@v{\fca@yaw}\or\def\fca@v{\fca@yax}\or%
  \def\fca@v{\fca@yay}\or\def\fca@v{\fca@yaz}\or%
  \def\fca@v{\fca@yba}\or\def\fca@v{\fca@ybb}\or\def\fca@v{\fca@ybc}\or%
  \def\fca@v{\fca@ybd}\or\def\fca@v{\fca@ybe}\or\def\fca@v{\fca@ybf}\or%
  \def\fca@v{\fca@ybg}\or\def\fca@v{\fca@ybh}\or\def\fca@v{\fca@ybi}\or%
  \def\fca@v{\fca@ybj}\or\def\fca@v{\fca@ybk}\or\def\fca@v{\fca@ybl}\or%
  \def\fca@v{\fca@ybm}\or\def\fca@v{\fca@ybn}\or\def\fca@v{\fca@ybo}\or%
  \def\fca@v{\fca@ybp}\or\def\fca@v{\fca@ybq}\or\def\fca@v{\fca@ybr}\or%
  \def\fca@v{\fca@ybs}\or\def\fca@v{\fca@ybt}\or\def\fca@v{\fca@ybu}\or%
  \def\fca@v{\fca@ybv}\or\def\fca@v{\fca@ybw}\or\def\fca@v{\fca@ybx}\or%
  \def\fca@v{\fca@yby}\or\def\fca@v{\fca@ybz}\fi}%
%
\newcommand{\Edge}[2]{\fca@getNode{#1}\fca@getNodeb{#2}%
  {\linethickness{\fca@edgethickness}%
    \fcadrawline(\fca@x,\fca@y)(\fca@u,\fca@v)}}%
\def\leftAttbox#1#2#3#4{\fca@getNode{#1}\put(\fca@x,\fca@y){%
    \begin{picture}(#2,#3)(#2,0)%
      \put(0,#3){\makebox(0,0)[rb]{\begin{minipage}{\LabelBoxWidth}%
            \raggedleft\AttributeLabelStyle#4\end{minipage}}}%
      \fca@changebValue{#3}{-1}{\fca@u}%
      \ifthenelse{\boolean{fca@dots}}{{\thinlines\dottedline(1,\fca@u)(#2,0)}}{}%
    \end{picture}}}%
% 
\def\centerAttbox#1#2#3#4{\fca@getNode{#1}\put(\fca@x,\fca@y){%
    \begin{picture}(#2,#3)(0,0)%
      \put(#2,#3){\makebox(0,0)[cb]{\begin{minipage}{\LabelBoxWidth}%
            \centering\AttributeLabelStyle#4\end{minipage}}}%
      \fca@changeaValue{#2}{0}{\fca@u}\fca@changebValue{#3}{-1}{\fca@v}%
      \ifthenelse{\boolean{fca@dots}}{{\thinlines\dottedline(\fca@u,\fca@v)(0,0)}}{}%
    \end{picture}}}%
% 
\def\rightAttbox#1#2#3#4{\fca@getNode{#1}\put(\fca@x,\fca@y){%
    \begin{picture}(#2,#3)(0,0)%
      \put(#2,#3){\makebox(0,0)[lb]{\begin{minipage}{\LabelBoxWidth}%
            \raggedright\AttributeLabelStyle#4\end{minipage}}}%
      \fca@changeaValue{#2}{-1}{\fca@u}\fca@changebValue{#3}{-1}{\fca@v}%
      \ifthenelse{\boolean{fca@dots}}{{\thinlines\dottedline(0,0)(\fca@u,\fca@v)}}{}%
    \end{picture}}}%
% 
\def\leftObjbox#1#2#3#4{\fca@getNode{#1}\put(\fca@x,\fca@y){%
    \begin{picture}(#2,#3)(#2,#3)%
      \put(0,0){\makebox(0,0)[rt]{\begin{minipage}{\LabelBoxWidth}%
            \raggedleft\ObjectLabelStyle#4\end{minipage}}}%
      \ifthenelse{\boolean{fca@dots}}{{\thinlines\dottedline(1,1)(#2,#3)}}{}%
    \end{picture}}}%
% 
\def\centerObjbox#1#2#3#4{\fca@getNode{#1}\put(\fca@x,\fca@y){%
    \begin{picture}(#2,#3)(0,#3)%
      \put(#2,0){\makebox(0,0)[ct]{\begin{minipage}{\LabelBoxWidth}%
            \centering\ObjectLabelStyle#4\end{minipage}}}%
      \ifthenelse{\boolean{fca@dots}}{{\thinlines\dottedline(0,#3)(#2,1)}}{}%
    \end{picture}}}%
% 
\def\rightObjbox#1#2#3#4{\fca@getNode{#1}\put(\fca@x,\fca@yRechnungsnummer RE-00379166/04/2013 ){%
    \begin{picture}(#2,#3)(0,#3)%
      \put(#2,0){\makebox(0,0)[lt]{\begin{minipage}{\LabelBoxWidth}%
            \raggedright\ObjectLabelStyle#4\end{minipage}}}%
      \fca@changeaValue{#2}{-1}{\fca@u}%
      \ifthenelse{\boolean{fca@dots}}{{\thinlines\dottedline(0,#3)(\fca@u,1)}}{}%
    \end{picture}}}%
%
\fi
\newcommand{\fca@edge}{%
  \@ifnextchar\bgroup{\fca@oldedge}{\fca@newedge}
% \egroup
}
\newcommand{\fca@oldedge}[2]{%
  {%
    \pgfsetlinewidth{\fca@edgethickness}%
    \pgfpathmoveto{\pgfpointshapeborder{\fca@nodename#1}{\pgfpointanchor{\fca@nodename#2}{center}}}%
    \pgfpathlineto{\pgfpointshapeborder{\fca@nodename#2}{\pgfpointanchor{\fca@nodename#1}{center}}}%
    \pgfusepath{stroke}%
  }%
  \ignorespaces
}
% 
\def\fca@changeaValue#1#2#3{\setcounter{fca@AuxCounter}{#1}%
  \addtocounter{fca@AuxCounter}{#2}\def#3{\value{fca@AuxCounter}}}%
\def\fca@changebValue#1#2#3{\setcounter{fca@BuxCounter}{#1}%
  \addtocounter{fca@BuxCounter}{#2}\def#3{\value{fca@BuxCounter}}}%
\newcommand{\NoDots}{\setboolean{fca@dots}{false}}
%    \end{macrocode}
%
% \begin{macro}{\fca@labelBox}\marg{node anchor}\marg{label anchor}\marg{prefix}\marg{label}\marg{content}
% \begin{macro}{\fca@labelBox}\marg{node anchor}\marg{label anchor}\marg{prefix}\marg{label}\marg{xoffset}\marg{yoffset}\marg{content}
%    \begin{macrocode}
\newcommand\fca@labelBox[5]{%
  \@ifnextchar\bgroup{%
    \fca@oldlabelBox{#1}{#2}{#3}{#4}{#5}%
  }{
    \let\fca@extrashift\relax
    \fca@@labelBox{#1}{#2}{#3}{#4}{#5}%
  }%
}
\newcommand\fca@oldlabelBox[7]{%
  \PackageWarning{fca}{The offset parameter of #2 #3 has been
    ignored.}
  {%
    \fca@parselength\@tempdima{#5}\unitlength
    \fca@parselength\@tempdimb{-(#6)}\unitlength
    \edef\fca@extrashift{%
      \noexpand\pgftransformshift{\noexpand\pgfpoint{\the\@tempdima}{\the\@tempdimb}}%
    }%
    \fca@@labelBox{#1}{#2}{#3}{#4}{#7}%
  }%
}
\newcommand\fca@@labelBox[5]{%
  {%
    \pgftransformshift{\pgfpointanchor{\fca@nodename#4}{#1}}%
    \fca@extrashift
    \pgfnode{rectangle}{#2}{#5}{\fca@nodename#3#4}{}%
  }%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%    \begin{macrocode}
\newcommand\fca@leftAttbox{%
  \fca@labelBox{north west}{south east}{ attribute left }%
}
\newcommand\fca@centerAttbox{%
  \fca@labelBox{north}{south}{ attribute center }%
}
\newcommand\fca@rightAttbox{%
  \fca@labelBox{north east}{south west}{ attribute right }%
}
\newcommand\fca@leftObjbox{%
  \fca@labelBox{south west}{north east}{ object left }%
}
\newcommand\fca@centerObjbox{%
  \fca@labelBox{south}{north}{ object center }%
}
\newcommand\fca@rightObjbox{%
  \fca@labelBox{south east}{north west}{ object right }%
}
% 
\def\fca@ResetDefaults{\setcounter{fca@minNode}{60}%
  \setcounter{fca@maxNode}{0}%
  \setcounter{fca@CircleDiameter}{4}%
  \setboolean{fca@CircledNumbers}{false}%
  \fca@Defaults}%
% 
\def\ColorNode#1{{%
    \linethickness{\fca@nodethickness}%
    \color{#1}{\circle*{\value{fca@CircleDiameter}}}%
    \color{black}{\circle{\value{fca@CircleDiameter}}}}}%
% 
\def\fca@circle{{%
    \linethickness{\fca@nodethickness}%
    \color{\fca@nodecolor}{\circle*{\value{fca@CircleDiameter}}}%
    \color{black}{\circle{\value{fca@CircleDiameter}}}}}%
% 
\def\fca@DrawCircles{\setcounter{fca@runNode}{\value{fca@minNode}}%
  \stepcounter{fca@maxNode}%
  \whiledo{\value{fca@runNode}<\value{fca@maxNode}}%
  {\fca@getNode{\value{fca@runNode}}%
    \put(\fca@x,\fca@y){\fca@circle}%
    \ifthenelse{\boolean{fca@CircledNumbers}}%
    {\put(\fca@x,\fca@y){\makebox(0,0){\tiny\arabic{fca@runNode}}}}{}%
    \stepcounter{fca@runNode}}}%
%

\newcommand*\fca@setb@undingbox{%
}%
\newcommand*\fca@ignoreboundingbox{}%

% set bounding box using brace notation
\newcommand*\fca@olddiagram[2]{%
  \fca@parselength\@tempdima{#1}\unitlength
  \edef\fca@right@border{\the\@tempdima}%
  \fca@parselength\@tempdimb{#2}\unitlength
  \edef\fca@top@border{\the\@tempdimb}%
  \let\fca@boundingbox\fca@setboundingbox
  \fca@parselength\@tempdima{-(\fcaDiagramXoffset)}\unitlength%
  \edef\fca@left@border{\the\@tempdima}%
  \fca@parselength\@tempdima{-(\fcaDiagramYoffset)}\unitlength%
  \edef\fca@bottom@border{\the\@tempdima}%
  \fca@startdiagram
  \fca@setboundingbox{\fca@left@border}{\fca@bottom@border}
  {\fca@right@border}{\fca@top@border}%
}
\newcommand*\fca@diagram{%
  \@ifnextchar(\fca@diagr@m\fca@di@gram
% )
}
% set bounding box using parentheses
\newcommand*\fca@diagr@m{%(#1,#2)
  \PackageError{fca}{not implemented}{not implemented}%
}
% set bounding box using defaults
\newcommand*\fca@di@gram{%
  \fca@startdiagram
}
\newcommand*\fca@startdiagram{%
  \fca@begindiagram
  \fca@Defaults
}
\newcommand*\fca@setboundingbox[4]{%
  \pgfpathrectangle{\pgfpoint{#1}{#2}}{\pgfpoint{#3}{#4}}%
  \pgfusepath{use as bounding box}%
}
% \todo{Lattice diagrams inside pgf pictures should be drawn inside
% their own scope}
\newenvironment{diagram}
{%
  \ifpgfpicture
    \def\fca@begindiagram{%
      \begin{pgfscope}%
        \def\fca@enddiagram{\end{pgfscope}}%
    }
  \else
    \def\fca@begindiagram{%
      \begin{pgfpicture}%
        \def\fca@enddiagram{\end{pgfpicture}}%
    }
  \fi
  \noindent
  \@ifnextchar\bgroup\fca@olddiagram\fca@diagram% This line must be
                                % executed before \begin{pgfpictire}
}%
{%
  %\fca@DrawCircles
  \fca@enddiagram%
}%
%    \end{macrocode}
% \changes{2.2}{2022/05/06}{Rename \cs{EdgeThickness} to
% \cs{fcaEdgeThickness} and \cs{NodeThickness} to \cs{fcaNodeThickness}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
% End of diagram environment definition.                                      %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
% Some simple macros for FCA texts.                                           %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    \begin{macrocode}
\providecommand{\GMI}{(G,M,\relI)}
\newcommand{\context}[1][K]{\ensuremath{\mathbb{#1}}}
\providecommand{\'}{\ensuremath{\sp\prime}}% derivation operator
\providecommand{\extent}[1]{\textrm{ext}(#1)}
\providecommand{\intent}[1]{\textrm{int}(#1)}
\providecommand{\extents}[1]{\textrm{Ext}(#1)}
\providecommand{\intents}[1]{\textrm{Int}(#1)}
\providecommand{\BV}{\underline{{\mathfrak B}}}
\providecommand{\CL}{\BV}
\providecommand{\BGMI}{{\mathfrak B} (G,M,\relI)}
\providecommand{\CGMI}{\BGMI}
\providecommand{\BVGMI}{\BV (G,M,\relI)}
\providecommand{\CLGMI}{\BVGMI}
\providecommand{\HNI}{(H,N,\relI \cap\; H{\times}N)}
\providecommand{\relI}{\mathrel{I}}
\providecommand{\notI}{\mathrel{\mbox{\rlap{\char'40}%
      {\it I}\hspace*{-0.09em}\raisebox{.27ex}{\char'40}}}}%
% 
\providecommand{\bigtimes}{\mathop{%
    \mathchoice{\raisebox{-2pt}{\huge$\times$}}{\mbox{\LARGE$\times$}}%
    {\raisebox{0pt}{\Large$\times$}}{\times}}\displaylimits}%
% 
\providecommand{\Runterpfeil}{\mathrel{\swarrow}}
\providecommand{\DownArrow}{\Runterpfeil}
\providecommand{\Hochpfeil}{\mathrel{\nearrow}}
\providecommand{\UpArrow}{\Hochpfeil}
\providecommand{\IRunterpfeil}{\mathrel{\searrow}}
\providecommand{\IDownArrow}{\IRunterpfeil}
\providecommand{\IHochpfeil}{\mathrel{\nwarrow}}
\providecommand{\IUpArrow}{\IHochpfeil}
\providecommand{\Doppelpfeil}{\mathrel{\!\!\rlap{$\;\nearrow$}\swarrow}}
\providecommand{\DoubleArrow}{\Doppelpfeil}
% 
\newcommand{\DDPfeil}{\mathrel{\mathchoice%
    {\mbox{$\displaystyle\swarrow\hspace{-.7em}\swarrow$}}
    {\mbox{$\textstyle\swarrow\hspace{-.7em}\swarrow$}}
    {\mbox{$\scriptstyle\swarrow\hspace{-.5em}\swarrow$}}
    {\mbox{$\scriptscriptstyle\swarrow\hspace{-.35em}\swarrow$}}}}
% 
\newcommand{\NDDPfeil}{\mathrel{\mathchoice%
    {\mbox{$\displaystyle\swarrow\hspace{-.7em}\swarrow%
        \hspace{-1.2em}\backslash\hspace{.4em}$}}
    {\mbox{$\textstyle\swarrow\hspace{-.7em}\swarrow
        \hspace{-1.1em}\backslash\hspace{.4em}$}}
    {\mbox{$\scriptstyle\swarrow\hspace{-.5em}\swarrow
        \hspace{-.6em}\backslash\hspace{.2em}$}}
    {\mbox{$\scriptscriptstyle\swarrow\hspace{-.35em}\swarrow
        \hspace{-.5em}\backslash\hspace{.1em}$}}}}
% 
\providecommand{\DPfeil}{\DDPfeil}
\providecommand{\NDPfeil}{\NDDPfeil}
\newcommand{\DDArrow}{\DDPfeil}
\newcommand{\NDDArrow}{\NDDPfeil}
\providecommand{\Semi}{\mathrel{\mbox{\tiny\rlap{\raisebox{2.0ex}%
        {$\bigtriangledown$}}\raisebox{-0.0ex}{$\bigtriangleup$}}}}
\def\ovee{\mbox{\small$\mathrel{\hspace{.35em}\raisebox{-1pt}%
      {$\smash{\vee}$}\hspace*{-.835em}\bigcirc\hspace{.2em}}$}}
\def\owedge{\mbox{\small$\mathrel{\hspace{.35em}\smash{\wedge}%
      \hspace*{-.835em}\bigcirc\hspace{.2em}}$}}
% 
\providecommand{\ptimes}[1]{\mathrel{\stackrel{#1}{\times}}}
% 
\providecommand{\FCA}{Formal Concept Analysis\xspace}
\providecommand{\FBA}{Formale Begriffsanalyse\xspace}
\providecommand{\FnBA}{Formalen Begriffsanalyse\xspace}
%    \end{macrocode}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
% End of fca.sty style file definitions                                       %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \iffalse
%    \begin{macrocode}
%</fca.sty>
%    \end{macrocode}
% \fi
% \iffalse
%    \begin{macrocode}
%<*formula1.cxt>
%    \end{macrocode}
% \fi
% \section{A formal context for demonstrating \cs{cxtinput}}
% The following formal context file is saved as \filenm{formula1.dtx}
% in the documentation folder.
%    \begin{macrocode}
B

3
3

Hamilton
Alonso
Massa
1.
2.
disqualified
X..
.X.
.XX
%    \end{macrocode}
% \iffalse
%    \begin{macrocode}
%</formula1.cxt>
%    \end{macrocode}
% \fi
% \Finale
% \PrintChanges

% \endinput
% Local Variables:
% mode: doctex
% TeX-master: t
% End:
